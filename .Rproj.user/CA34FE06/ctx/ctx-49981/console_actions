{
    "type": [
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        2,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        2,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        2,
        3,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2
    ],
    "data": [
        "+ ",
        "  body_mass_g ~ island,",
        "+ ",
        "  data = penguins,",
        "+ ",
        "  FUN = c)",
        "Error in get(as.character(FUN), mode = \"function\", envir = envir) : \n  object 'FUN' of mode 'function' was not found\n",
        "\nRestarting R session...\n\n",
        "> ",
        "require(palmerpenguins)",
        "Loading required package: palmerpenguins\n",
        "> ",
        "dat_groups = aggregate(",
        "+ ",
        "  body_mass_g ~ island,",
        "+ ",
        "  data = penguins,",
        "+ ",
        "  FUN = c)",
        "> ",
        "str(dat_groups)",
        "'data.frame':\t3 obs. of  2 variables:\n $ island     : Factor w/ 3 levels \"Biscoe\",\"Dream\",..: 1 2 3\n $ body_mass_g:List of 3\n  ..$ : int  3400 3600 3800 3950 3800 3800 3550 3200 3150 3950 ...\n  ..$ : int  3250 3900 3300 3900 3325 4150 3950 3550 3300 4650 ...\n  ..$ : int  3750 3800 3250 3450 3650 3625 4675 3475 4250 3300 ...\n",
        "> ",
        "dat_groups1 = aggregate(",
        "+ ",
        "  body_mass_g ~ sex,",
        "+ ",
        "  data = penguins,",
        "+ ",
        "  FUN = c)",
        "> ",
        "str(dat_groups1)",
        "'data.frame':\t2 obs. of  2 variables:\n $ sex        : Factor w/ 2 levels \"female\",\"male\": 1 2\n $ body_mass_g:List of 2\n  ..$ : int  3800 3250 3450 3625 3200 3700 3450 3325 3400 3800 ...\n  ..$ : int  3750 3650 4675 3800 4400 4500 4200 3600 3950 3800 ...\n",
        "> ",
        "dat_groups2 = aggregate(",
        "+ ",
        "  body_mass_g ~ species * sex,",
        "+ ",
        "  data = penguins,",
        "+ ",
        "  FUN = c)",
        "> ",
        "str(dat_groups2)",
        "'data.frame':\t6 obs. of  3 variables:\n $ species    : Factor w/ 3 levels \"Adelie\",\"Chinstrap\",..: 1 2 3 1 2 3\n $ sex        : Factor w/ 2 levels \"female\",\"male\": 1 1 1 2 2 2\n $ body_mass_g:List of 6\n  ..$ : int  3800 3250 3450 3625 3200 3700 3450 3325 3400 3800 ...\n  ..$ : int  3500 3525 3950 3250 4150 3800 3700 3575 3700 3450 ...\n  ..$ : int  4500 4450 4550 4800 4400 4650 4650 4200 4150 4800 ...\n  ..$ : int  3750 3650 4675 3800 4400 4500 4200 3600 3950 3800 ...\n  ..$ : int  3900 3650 3725 3750 3700 3775 4050 4050 3300 4400",
        " ...\n  ..$ : int  5700 5700 5400 5200 5150 5550 5850 5850 6300 5350 ...\n",
        "> ",
        "bartlett.test(dat_groups2$body_mass_g)",
        "\n\tBartlett test of homogeneity of variances\n\ndata:  dat_groups2$body_mass_g\nBartlett's K-squared = 7.6908, df = 5, p-value = 0.1741\n\n",
        "> ",
        "dat_groups2 = aggregate(",
        "+ ",
        "  body_mass_g ~ species * sex,",
        "+ ",
        "  data = penguins,",
        "+ ",
        "  FUN = c)",
        "> ",
        "str(dat_groups2)",
        "'data.frame':\t6 obs. of  3 variables:\n $ species    : Factor w/ 3 levels \"Adelie\",\"Chinstrap\",..: 1 2 3 1 2 3\n $ sex        : Factor w/ 2 levels \"female\",\"male\": 1 1 1 2 2 2\n $ body_mass_g:List of 6\n  ..$ : int  3800 3250 3450 3625 3200 3700 3450 3325 3400 3800 ...\n  ..$ : int  3500 3525 3950 3250 4150 3800 3700 3575 3700 3450 ...\n  ..$ : int  4500 4450 4550 4800 4400 4650 4650 4200 4150 4800 ...\n  ..$ : int  3750 3650 4675 3800 4400 4500 4200 3600 3950 3800 ...\n  ..$ : int  3900 3650 3725 3750 3700 3775 4050 4050 3300 4400",
        " ...\n  ..$ : int  5700 5700 5400 5200 5150 5550 5850 5850 6300 5350 ...\n",
        "> ",
        "bartlett.test(dat_groups2$body_mass_g)",
        "\n\tBartlett test of homogeneity of variances\n\ndata:  dat_groups2$body_mass_g\nBartlett's K-squared = 7.6908, df = 5, p-value = 0.1741\n\n",
        "Quitting from lines 2-23 (Guitart_Lab09.Rmd) \n",
        "> ",
        "{",
        "+ ",
        "library(here)",
        "+ ",
        "birds = read.csv(here(\"data\", \"bird.sta.csv\"))",
        "+ ",
        "hab = read.csv(here(\"data\", \"hab.sta.csv\"))",
        "+ ",
        "birdhab = merge(birds, hab, by=c(\"basin\", \"sub\", \"sta\"))",
        "+ ",
        "br_creeper_table = table(birdhab$s.edge, birdhab$BRCR > 0)[, 2:1]",
        "+ ",
        "br_creeper_table",
        "+ ",
        "}",
        "   \n    TRUE FALSE\n  E   29   144\n  I  314   559\n",
        "> ",
        "{",
        "+ ",
        "chi_BRCR <- chisq.test(br_creeper_table)",
        "+ ",
        "chi_BRCR$observed",
        "+ ",
        "chi_BRCR$expected",
        "+ ",
        "chi_BRCR$residuals",
        "+ ",
        "}",
        "   \n         TRUE     FALSE\n  E -3.681603  2.571617\n  I  1.638901 -1.144781\n",
        "> ",
        "{",
        "+ ",
        "  require(palmerpenguins)",
        "+ ",
        "  penguins = penguins",
        "+ ",
        "fit_species = lm(formula = body_mass_g ~ species, data = penguins)",
        "+ ",
        "}",
        "> ",
        "fit_sex = lm(formula = body_mass_g ~ sex, data = penguins)",
        "> ",
        "fit_both = lm(formula = body_mass_g ~ species * sex, data = penguins)",
        "> ",
        "species_box = boxplot(body_mass_g ~ species, data = penguins, ",
        "+ ",
        "                      ylab = \"Body Mass (g)\", xlab = \"Species\",",
        "+ ",
        "                      main = \"Penguin Body Mass by Species\")",
        "> ",
        "species_box",
        "$stats\n     [,1] [,2] [,3]\n[1,] 2850 2900 3950\n[2,] 3350 3475 4700\n[3,] 3700 3700 5000\n[4,] 4000 3950 5500\n[5,] 4775 4550 6300\n\n$n\n[1] 151  68 123\n\n$conf\n         [,1]     [,2]     [,3]\n[1,] 3616.424 3608.989 4886.029\n[2,] 3783.576 3791.011 5113.971\n\n$out\n[1] 4800 2700\n\n$group\n[1] 2 2\n\n$names\n[1] \"Adelie\"    \"Chinstrap\" \"Gentoo\"   \n\n",
        "> ",
        "fitsex_box = boxplot(body_mass_g ~ sex, data = penguins, ",
        "+ ",
        "                      ylab = \"Body Mass (g)\", xlab = \"Sex\",",
        "+ ",
        "                      main = \"Penguin Body Mass by Sex\", names = c(\"Female\", \"Male\"))",
        "> ",
        "fitsex_box",
        "$stats\n     [,1] [,2]\n[1,] 2700 3250\n[2,] 3350 3900\n[3,] 3650 4300\n[4,] 4550 5325\n[5,] 5200 6300\n\n$n\n[1] 165 168\n\n$conf\n         [,1]     [,2]\n[1,] 3502.397 4126.293\n[2,] 3797.603 4473.707\n\n$out\nnumeric(0)\n\n$group\nnumeric(0)\n\n$names\n[1] \"Female\" \"Male\"  \n\n",
        "> ",
        "fitboth_box = boxplot(body_mass_g ~ species * sex, data = penguins, ",
        "+ ",
        "                      ylab = \"Body Mass (g)\", xlab = \"\", las = 2,",
        "+ ",
        "                      names = c(\"Adelie \\n Female\", \"Adelie \\n Male\", ",
        "+ ",
        "                                \"Gentoo \\n Female\", \"Gentoo \\n Male\",",
        "+ ",
        "                                \"Chinstrap \\n Female\", \"Chinstrap \\n Male\"),",
        "+ ",
        "                      main = \"Penguin Body Mass by Species and Sex\")",
        "> ",
        "fitboth_box",
        "$stats\n     [,1] [,2] [,3] [,4] [,5] [,6]\n[1,] 2850 2900 3950 3325 3250 4750\n[2,] 3175 3350 4450 3800 3725 5300\n[3,] 3400 3550 4700 4000 3950 5500\n[4,] 3550 3700 4875 4300 4100 5700\n[5,] 3900 4150 5200 4775 4550 6300\n\n$n\n[1] 73 34 58 73 34 61\n\n$conf\n         [,1]     [,2]     [,3]     [,4]     [,5]     [,6]\n[1,] 3330.653 3455.161 4611.828 3907.537 3848.387 5419.081\n[2,] 3469.347 3644.839 4788.172 4092.463 4051.613 5580.919\n\n$out\n[1] 2700 4800\n\n$group\n[1] 2 5\n\n$names\n[1] \"Adelie \\n Female\"    \"Adelie \\n Male\"     ",
        " \"Gentoo \\n Female\"   \n[4] \"Gentoo \\n Male\"      \"Chinstrap \\n Female\" \"Chinstrap \\n Male\"  \n\n",
        "> ",
        "species_bart = bartlett.test(body_mass_g ~ species, data = penguins)",
        "> ",
        "sex_bart = bartlett.test(body_mass_g ~ sex, data = penguins)",
        "> ",
        "dat_groups2 = aggregate(",
        "+ ",
        "  body_mass_g ~ species * sex,",
        "+ ",
        "  data = penguins,",
        "+ ",
        "  FUN = c)",
        "> ",
        "str(dat_groups2)",
        "'data.frame':\t6 obs. of  3 variables:\n $ species    : Factor w/ 3 levels \"Adelie\",\"Chinstrap\",..: 1 2 3 1 2 3\n $ sex        : Factor w/ 2 levels \"female\",\"male\": 1 1 1 2 2 2\n $ body_mass_g:List of 6\n  ..$ : int  3800 3250 3450 3625 3200 3700 3450 3325 3400 3800 ...\n  ..$ : int  3500 3525 3950 3250 4150 3800 3700 3575 3700 3450 ...\n  ..$ : int  4500 4450 4550 4800 4400 4650 4650 4200 4150 4800 ...\n  ..$ : int  3750 3650 4675 3800 4400 4500 4200 3600 3950 3800 ...\n  ..$ : int  3900 3650 3725 3750 3700 3775 4050 4050 3300 4400",
        " ...\n  ..$ : int  5700 5700 5400 5200 5150 5550 5850 5850 6300 5350 ...\n",
        "> ",
        "bartlett.test(dat_groups2$body_mass_g)",
        "\n\tBartlett test of homogeneity of variances\n\ndata:  dat_groups2$body_mass_g\nBartlett's K-squared = 7.6908, df = 5, p-value = 0.1741\n\n",
        "> ",
        "{",
        "+ ",
        "chi_BRCR <- chisq.test(br_creeper_table)",
        "+ ",
        "chi_BRCR$observed",
        "+ ",
        "chi_BRCR$expected",
        "+ ",
        "chi_BRCR$residuals",
        "+ ",
        "}",
        "   \n         TRUE     FALSE\n  E -3.681603  2.571617\n  I  1.638901 -1.144781\n",
        "> ",
        "{",
        "+ ",
        "library(here)",
        "+ ",
        "birds = read.csv(here(\"data\", \"bird.sta.csv\"))",
        "+ ",
        "hab = read.csv(here(\"data\", \"hab.sta.csv\"))",
        "+ ",
        "birdhab = merge(birds, hab, by=c(\"basin\", \"sub\", \"sta\"))",
        "+ ",
        "br_creeper_table = table(birdhab$s.edge, birdhab$BRCR > 0)[, 2:1]",
        "+ ",
        "br_creeper_table",
        "+ ",
        "}",
        "   \n    TRUE FALSE\n  E   29   144\n  I  314   559\n",
        "> ",
        "{",
        "+ ",
        "chi_BRCR <- chisq.test(br_creeper_table)",
        "+ ",
        "chi_BRCR$observed",
        "+ ",
        "chi_BRCR$expected",
        "+ ",
        "chi_BRCR$residuals",
        "+ ",
        "}",
        "   \n         TRUE     FALSE\n  E -3.681603  2.571617\n  I  1.638901 -1.144781\n",
        "> ",
        "{",
        "+ ",
        "  require(palmerpenguins)",
        "+ ",
        "  penguins = penguins",
        "+ ",
        "fit_species = lm(formula = body_mass_g ~ species, data = penguins)",
        "+ ",
        "}",
        "> ",
        "fit_sex = lm(formula = body_mass_g ~ sex, data = penguins)",
        "> ",
        "fit_both = lm(formula = body_mass_g ~ species * sex, data = penguins)",
        "> ",
        "species_box = boxplot(body_mass_g ~ species, data = penguins, ",
        "+ ",
        "                      ylab = \"Body Mass (g)\", xlab = \"Species\",",
        "+ ",
        "                      main = \"Penguin Body Mass by Species\")",
        "> ",
        "species_box",
        "$stats\n     [,1] [,2] [,3]\n[1,] 2850 2900 3950\n[2,] 3350 3475 4700\n[3,] 3700 3700 5000\n[4,] 4000 3950 5500\n[5,] 4775 4550 6300\n\n$n\n[1] 151  68 123\n\n$conf\n         [,1]     [,2]     [,3]\n[1,] 3616.424 3608.989 4886.029\n[2,] 3783.576 3791.011 5113.971\n\n$out\n[1] 4800 2700\n\n$group\n[1] 2 2\n\n$names\n[1] \"Adelie\"    \"Chinstrap\" \"Gentoo\"   \n\n",
        "> ",
        "fitsex_box = boxplot(body_mass_g ~ sex, data = penguins, ",
        "+ ",
        "                      ylab = \"Body Mass (g)\", xlab = \"Sex\",",
        "+ ",
        "                      main = \"Penguin Body Mass by Sex\", names = c(\"Female\", \"Male\"))",
        "> ",
        "fitsex_box",
        "$stats\n     [,1] [,2]\n[1,] 2700 3250\n[2,] 3350 3900\n[3,] 3650 4300\n[4,] 4550 5325\n[5,] 5200 6300\n\n$n\n[1] 165 168\n\n$conf\n         [,1]     [,2]\n[1,] 3502.397 4126.293\n[2,] 3797.603 4473.707\n\n$out\nnumeric(0)\n\n$group\nnumeric(0)\n\n$names\n[1] \"Female\" \"Male\"  \n\n",
        "> ",
        "fitboth_box = boxplot(body_mass_g ~ species * sex, data = penguins, ",
        "+ ",
        "                      ylab = \"Body Mass (g)\", xlab = \"\", las = 2,",
        "+ ",
        "                      names = c(\"Adelie \\n Female\", \"Adelie \\n Male\", ",
        "+ ",
        "                                \"Gentoo \\n Female\", \"Gentoo \\n Male\",",
        "+ ",
        "                                \"Chinstrap \\n Female\", \"Chinstrap \\n Male\"),",
        "+ ",
        "                      main = \"Penguin Body Mass by Species and Sex\")",
        "> ",
        "fitboth_box",
        "$stats\n     [,1] [,2] [,3] [,4] [,5] [,6]\n[1,] 2850 2900 3950 3325 3250 4750\n[2,] 3175 3350 4450 3800 3725 5300\n[3,] 3400 3550 4700 4000 3950 5500\n[4,] 3550 3700 4875 4300 4100 5700\n[5,] 3900 4150 5200 4775 4550 6300\n\n$n\n[1] 73 34 58 73 34 61\n\n$conf\n         [,1]     [,2]     [,3]     [,4]     [,5]     [,6]\n[1,] 3330.653 3455.161 4611.828 3907.537 3848.387 5419.081\n[2,] 3469.347 3644.839 4788.172 4092.463 4051.613 5580.919\n\n$out\n[1] 2700 4800\n\n$group\n[1] 2 5\n\n$names\n[1] \"Adelie \\n Female\"    \"Adelie \\n Male\"     ",
        " \"Gentoo \\n Female\"   \n[4] \"Gentoo \\n Male\"      \"Chinstrap \\n Female\" \"Chinstrap \\n Male\"  \n\n",
        "> ",
        "species_bart = bartlett.test(body_mass_g ~ species, data = penguins)",
        "> ",
        "sex_bart = bartlett.test(body_mass_g ~ sex, data = penguins)",
        "> ",
        "dat_groups2 = aggregate(",
        "+ ",
        "  body_mass_g ~ species * sex,",
        "+ ",
        "  data = penguins,",
        "+ ",
        "  FUN = c)",
        "> ",
        "str(dat_groups2)",
        "'data.frame':\t6 obs. of  3 variables:\n $ species    : Factor w/ 3 levels \"Adelie\",\"Chinstrap\",..: 1 2 3 1 2 3\n $ sex        : Factor w/ 2 levels \"female\",\"male\": 1 1 1 2 2 2\n $ body_mass_g:List of 6\n  ..$ : int  3800 3250 3450 3625 3200 3700 3450 3325 3400 3800 ...\n  ..$ : int  3500 3525 3950 3250 4150 3800 3700 3575 3700 3450 ...\n  ..$ : int  4500 4450 4550 4800 4400 4650 4650 4200 4150 4800 ...\n  ..$ : int  3750 3650 4675 3800 4400 4500 4200 3600 3950 3800 ...\n  ..$ : int  3900 3650 3725 3750 3700 3775 4050 4050 3300 4400",
        " ...\n  ..$ : int  5700 5700 5400 5200 5150 5550 5850 5850 6300 5350 ...\n",
        "> ",
        "bartlett.test(dat_groups2$body_mass_g)",
        "\n\tBartlett test of homogeneity of variances\n\ndata:  dat_groups2$body_mass_g\nBartlett's K-squared = 7.6908, df = 5, p-value = 0.1741\n\n",
        "> ",
        "dat_groups2 = aggregate(",
        "+ ",
        "  body_mass_g ~ species * sex,",
        "+ ",
        "  data = penguins,",
        "+ ",
        "  FUN = c)",
        "> ",
        "str(dat_groups2)",
        "'data.frame':\t6 obs. of  3 variables:\n $ species    : Factor w/ 3 levels \"Adelie\",\"Chinstrap\",..: 1 2 3 1 2 3\n $ sex        : Factor w/ 2 levels \"female\",\"male\": 1 1 1 2 2 2\n $ body_mass_g:List of 6\n  ..$ : int  3800 3250 3450 3625 3200 3700 3450 3325 3400 3800 ...\n  ..$ : int  3500 3525 3950 3250 4150 3800 3700 3575 3700 3450 ...\n  ..$ : int  4500 4450 4550 4800 4400 4650 4650 4200 4150 4800 ...\n  ..$ : int  3750 3650 4675 3800 4400 4500 4200 3600 3950 3800 ...\n  ..$ : int  3900 3650 3725 3750 3700 3775 4050 4050 3300 4400",
        " ...\n  ..$ : int  5700 5700 5400 5200 5150 5550 5850 5850 6300 5350 ...\n",
        "> ",
        "both_bart = bartlett.test(dat_groups2$body_mass_g)",
        "> ",
        "boxplot(body_mass_g ~ species, data = penguins, ",
        "+ ",
        "                      ylab = \"Body Mass (g)\", xlab = \"Species\",",
        "+ ",
        "                      main = \"Penguin Body Mass by Species\")",
        "> ",
        "boxplot(body_mass_g ~ sex, data = penguins, ",
        "+ ",
        "                      ylab = \"Body Mass (g)\", xlab = \"Sex\",",
        "+ ",
        "                      main = \"Penguin Body Mass by Sex\", names = c(\"Female\", \"Male\"))",
        "> ",
        "boxplot(body_mass_g ~ species * sex, data = penguins, ",
        "+ ",
        "                      ylab = \"Body Mass (g)\", xlab = \"\", las = 2,",
        "+ ",
        "                      names = c(\"Adelie \\n Female\", \"Adelie \\n Male\", ",
        "+ ",
        "                                \"Gentoo \\n Female\", \"Gentoo \\n Male\",",
        "+ ",
        "                                \"Chinstrap \\n Female\", \"Chinstrap \\n Male\"),",
        "+ ",
        "                      main = \"Penguin Body Mass by Species and Sex\")",
        "> ",
        "dat_fl <- read.csv(here(\"data\", \"trees_FL.csv\"))",
        "Error in file(file, \"rt\") : cannot open the connection\n",
        "> ",
        "dat_fl <- read.csv(here(\"data\", \"trees_FL.csv\"))",
        "> ",
        "head(dat_fl, 4)",
        "> ",
        "str(dat_fl)",
        "'data.frame':\t3046 obs. of  7 variables:\n $ DBH_in               : num  8 8 5.5 6.2 16 15.2 12.5 14.8 15.5 20.7 ...\n $ HeighttoTop_ft       : num  12.5 16 15.5 14 17 20 20.5 20.5 19.5 22.5 ...\n $ Species              : chr  \"Chinese elm\" \"Chinese elm\" \"Crapemyrtle\" \"Crapemyrtle\" ...\n $ CanopyWidth_ft       : num  13 20 15 24 27 19 21 19 25 27 ...\n $ MostSignificantDefect: chr  \"Dead\" \"Decay\" \"Poor Tree Architecture\" \"Poor Tree Architecture\" ...\n $ Failure_Standardized : chr  \"whole\" \"whole\" \"whole\" \"whole\" ...",
        "\n $ ProbabilityofFailure : int  4 3 1 1 2 2 2 2 2 2 ...\n",
        "> ",
        "{",
        "+ ",
        "dat_fl <- read.csv(here(\"data\", \"trees_FL.csv\"))",
        "+ ",
        "head(dat_fl, 4)",
        "+ ",
        "str(dat_fl)",
        "+ ",
        "}",
        "'data.frame':\t3046 obs. of  7 variables:\n $ DBH_in               : num  8 8 5.5 6.2 16 15.2 12.5 14.8 15.5 20.7 ...\n $ HeighttoTop_ft       : num  12.5 16 15.5 14 17 20 20.5 20.5 19.5 22.5 ...\n $ Species              : chr  \"Chinese elm\" \"Chinese elm\" \"Crapemyrtle\" \"Crapemyrtle\" ...\n $ CanopyWidth_ft       : num  13 20 15 24 27 19 21 19 25 27 ...\n $ MostSignificantDefect: chr  \"Dead\" \"Decay\" \"Poor Tree Architecture\" \"Poor Tree Architecture\" ...\n $ Failure_Standardized : chr  \"whole\" \"whole\" \"whole\" \"whole\" ...",
        "\n $ ProbabilityofFailure : int  4 3 1 1 2 2 2 2 2 2 ...\n",
        "> ",
        "?barplot()",
        "> ",
        "par(mfrow = c(2, 2))",
        "> ",
        "barplot(dat_fl$ProbabilityofFailure)",
        "> ",
        "View(dat_fl)",
        "> ",
        "dat_fl$ProbabilityofFailure <- as.factor(dat_fl$ProbabilityofFailure)",
        "> ",
        "{",
        "+ ",
        "dat_fl <- read.csv(here(\"data\", \"trees_FL.csv\"))",
        "+ ",
        "head(dat_fl, 4)",
        "+ ",
        "str(dat_fl)",
        "+ ",
        "dat_fl$ProbabilityofFailure <- as.factor(dat_fl$ProbabilityofFailure)",
        "+ ",
        "str(dat_fl)",
        "+ ",
        "}",
        "'data.frame':\t3046 obs. of  7 variables:\n $ DBH_in               : num  8 8 5.5 6.2 16 15.2 12.5 14.8 15.5 20.7 ...\n $ HeighttoTop_ft       : num  12.5 16 15.5 14 17 20 20.5 20.5 19.5 22.5 ...\n $ Species              : chr  \"Chinese elm\" \"Chinese elm\" \"Crapemyrtle\" \"Crapemyrtle\" ...\n $ CanopyWidth_ft       : num  13 20 15 24 27 19 21 19 25 27 ...\n $ MostSignificantDefect: chr  \"Dead\" \"Decay\" \"Poor Tree Architecture\" \"Poor Tree Architecture\" ...\n $ Failure_Standardized : chr  \"whole\" \"whole\" \"whole\" \"whole\" ...",
        "\n $ ProbabilityofFailure : int  4 3 1 1 2 2 2 2 2 2 ...\n'data.frame':\t3046 obs. of  7 variables:\n $ DBH_in               : num  8 8 5.5 6.2 16 15.2 12.5 14.8 15.5 20.7 ...\n $ HeighttoTop_ft       : num  12.5 16 15.5 14 17 20 20.5 20.5 19.5 22.5 ...\n $ Species              : chr  \"Chinese elm\" \"Chinese elm\" \"Crapemyrtle\" \"Crapemyrtle\" ...\n $ CanopyWidth_ft       : num  13 20 15 24 27 19 21 19 25 27 ...\n $ MostSignificantDefect: chr  \"Dead\" \"Decay\" \"Poor Tree Architecture\" \"Poor Tree Architecture\" ...\n $ Failure_Standardized ",
        ": chr  \"whole\" \"whole\" \"whole\" \"whole\" ...\n $ ProbabilityofFailure : Factor w/ 4 levels \"1\",\"2\",\"3\",\"4\": 4 3 1 1 2 2 2 2 2 2 ...\n",
        "> ",
        "?table()",
        "> ",
        "sum(dat_fl$ProbabilityofFailure)",
        "Error in Summary.factor(c(4L, 3L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,  : \n  ‘sum’ not meaningful for factors\n",
        "> ",
        "barplot(dat_fl$ProbabilityofFailure)",
        "Error in barplot.default(dat_fl$ProbabilityofFailure) : \n  'height' must be a vector or a matrix\n",
        "> ",
        "dat_fl <- read.csv(here(\"data\", \"trees_FL.csv\"))",
        "> ",
        "head(dat_fl, 4)",
        "> ",
        "str(dat_fl)",
        "'data.frame':\t3046 obs. of  7 variables:\n $ DBH_in               : num  8 8 5.5 6.2 16 15.2 12.5 14.8 15.5 20.7 ...\n $ HeighttoTop_ft       : num  12.5 16 15.5 14 17 20 20.5 20.5 19.5 22.5 ...\n $ Species              : chr  \"Chinese elm\" \"Chinese elm\" \"Crapemyrtle\" \"Crapemyrtle\" ...\n $ CanopyWidth_ft       : num  13 20 15 24 27 19 21 19 25 27 ...\n $ MostSignificantDefect: chr  \"Dead\" \"Decay\" \"Poor Tree Architecture\" \"Poor Tree Architecture\" ...\n $ Failure_Standardized : chr  \"whole\" \"whole\" \"whole\" \"whole\" ...",
        "\n $ ProbabilityofFailure : int  4 3 1 1 2 2 2 2 2 2 ...\n",
        "> ",
        "barplot(dat_fl$ProbabilityofFailure)",
        "> ",
        "{",
        "+ ",
        "dat_fl <- read.csv(here(\"data\", \"trees_FL.csv\"))",
        "+ ",
        "head(dat_fl, 4)",
        "+ ",
        "dat_fl$ProbabilityofFailure <- as.factor(dat_fl$ProbabilityofFailure)",
        "+ ",
        "str(dat_fl)",
        "+ ",
        "",
        "+ ",
        "}",
        "'data.frame':\t3046 obs. of  7 variables:\n $ DBH_in               : num  8 8 5.5 6.2 16 15.2 12.5 14.8 15.5 20.7 ...\n $ HeighttoTop_ft       : num  12.5 16 15.5 14 17 20 20.5 20.5 19.5 22.5 ...\n $ Species              : chr  \"Chinese elm\" \"Chinese elm\" \"Crapemyrtle\" \"Crapemyrtle\" ...\n $ CanopyWidth_ft       : num  13 20 15 24 27 19 21 19 25 27 ...\n $ MostSignificantDefect: chr  \"Dead\" \"Decay\" \"Poor Tree Architecture\" \"Poor Tree Architecture\" ...\n $ Failure_Standardized : chr  \"whole\" \"whole\" \"whole\" \"whole\" ...",
        "\n $ ProbabilityofFailure : Factor w/ 4 levels \"1\",\"2\",\"3\",\"4\": 4 3 1 1 2 2 2 2 2 2 ...\n",
        "> ",
        "barplot(dat_fl$ProbabilityofFailure)",
        "Error in barplot.default(dat_fl$ProbabilityofFailure) : \n  'height' must be a vector or a matrix\n",
        "> ",
        "?barplot()",
        "> ",
        "barplot(formula = ProbabilityofFailure, data = dat_fl)",
        "Error in barplot(formula = ProbabilityofFailure, data = dat_fl) : \n  object 'ProbabilityofFailure' not found\n",
        "> ",
        "barplot(ProbabilityofFailure, data = dat_fl)",
        "Error in barplot(ProbabilityofFailure, data = dat_fl) : \n  object 'ProbabilityofFailure' not found\n",
        "> ",
        "table(dat_fl$ProbabilityofFailure)",
        "\n   1    2    3    4 \n1407  889  627  116 \n",
        "> ",
        "{",
        "+ ",
        "dat_fl <- read.csv(here(\"data\", \"trees_FL.csv\"))",
        "+ ",
        "head(dat_fl, 4)",
        "+ ",
        "dat_fl$ProbabilityofFailure <- as.factor(dat_fl$ProbabilityofFailure)",
        "+ ",
        "str(dat_fl)",
        "+ ",
        "prob_fail <- table(dat_fl$ProbabilityofFailure)",
        "+ ",
        "}",
        "'data.frame':\t3046 obs. of  7 variables:\n $ DBH_in               : num  8 8 5.5 6.2 16 15.2 12.5 14.8 15.5 20.7 ...\n $ HeighttoTop_ft       : num  12.5 16 15.5 14 17 20 20.5 20.5 19.5 22.5 ...\n $ Species              : chr  \"Chinese elm\" \"Chinese elm\" \"Crapemyrtle\" \"Crapemyrtle\" ...\n $ CanopyWidth_ft       : num  13 20 15 24 27 19 21 19 25 27 ...\n $ MostSignificantDefect: chr  \"Dead\" \"Decay\" \"Poor Tree Architecture\" \"Poor Tree Architecture\" ...\n $ Failure_Standardized : chr  \"whole\" \"whole\" \"whole\" \"whole\" ...",
        "\n $ ProbabilityofFailure : Factor w/ 4 levels \"1\",\"2\",\"3\",\"4\": 4 3 1 1 2 2 2 2 2 2 ...\n",
        "> ",
        "barplot(prob_fail)",
        "> ",
        "",
        "> ",
        "dat_fl$Failure_Standardized <- as.factor(dat_fl$Failure_Standardized)",
        "> ",
        "str(dat_fl)",
        "'data.frame':\t3046 obs. of  7 variables:\n $ DBH_in               : num  8 8 5.5 6.2 16 15.2 12.5 14.8 15.5 20.7 ...\n $ HeighttoTop_ft       : num  12.5 16 15.5 14 17 20 20.5 20.5 19.5 22.5 ...\n $ Species              : chr  \"Chinese elm\" \"Chinese elm\" \"Crapemyrtle\" \"Crapemyrtle\" ...\n $ CanopyWidth_ft       : num  13 20 15 24 27 19 21 19 25 27 ...\n $ MostSignificantDefect: chr  \"Dead\" \"Decay\" \"Poor Tree Architecture\" \"Poor Tree Architecture\" ...\n $ Failure_Standardized : Factor w/ 3 levels \"branch\",\"none\",..: ",
        "3 3 3 3 2 2 2 2 2 2 ...\n $ ProbabilityofFailure : Factor w/ 4 levels \"1\",\"2\",\"3\",\"4\": 4 3 1 1 2 2 2 2 2 2 ...\n",
        "> ",
        "stand_fail <- table(dat_fl$Failure_Standardized)",
        "> ",
        "barplot(stand_fail)",
        "> ",
        "barplot(prob_fail)",
        "> ",
        "barplot(stand_fail)",
        "> ",
        "hist(dat_fl$DBH_in)",
        "> ",
        "?plot()",
        "> ",
        "barplot(prob_fail)",
        "> ",
        "barplot(stand_fail)",
        "> ",
        "hist(dat_fl$DBH_in)",
        "> ",
        "plot(dat_fl$DBH_in, dat_fl$HeighttoTop_ft)",
        "> ",
        " par(mfrow = c(2, 2))",
        "> ",
        "barplot(prob_fail)",
        "> ",
        "barplot(stand_fail)",
        "> ",
        "hist(dat_fl$DBH_in)",
        "> ",
        "plot(dat_fl$DBH_in, dat_fl$HeighttoTop_ft)",
        "> ",
        " par(mfrow = c(2, 2))",
        "> ",
        "barplot(prob_fail, main = \"Tree Counts Per \\n Failure Probability\")",
        "> ",
        "barplot(stand_fail)",
        "> ",
        "hist(dat_fl$DBH_in)",
        "> ",
        "plot(dat_fl$DBH_in, dat_fl$HeighttoTop_ft)",
        "> ",
        " par(mfrow = c(2, 2))",
        "> ",
        "barplot(prob_fail, main = \"Counts Per Failure Prob\")",
        "> ",
        "barplot(stand_fail)",
        "> ",
        "hist(dat_fl$DBH_in)",
        "> ",
        "plot(dat_fl$DBH_in, dat_fl$HeighttoTop_ft)",
        "> ",
        " par(mfrow = c(2, 2))",
        "> ",
        "barplot(prob_fail, main = \"Counts Per Failure Class\")",
        "> ",
        "barplot(stand_fail)",
        "> ",
        "hist(dat_fl$DBH_in)",
        "> ",
        "plot(dat_fl$DBH_in, dat_fl$HeighttoTop_ft)",
        "> ",
        " par(mfrow = c(2, 2))",
        "> ",
        "barplot(prob_fail, main = \"Counts Per Failure Probability\")",
        "> ",
        "barplot(stand_fail, main = \"\")",
        "> ",
        "hist(dat_fl$DBH_in)",
        "> ",
        "plot(dat_fl$DBH_in, dat_fl$HeighttoTop_ft)",
        "> ",
        " par(mfrow = c(2, 2))",
        "> ",
        "barplot(prob_fail, main = \"Counts Per Failure Probability\")",
        "> ",
        "barplot(stand_fail, main = \"Counts Per Failure Class\")",
        "> ",
        "hist(dat_fl$DBH_in, main = \"Tree Diameters\")",
        "> ",
        "plot(dat_fl$DBH_in, dat_fl$HeighttoTop_ft, main = \"Tree Diameters By Height\")",
        "> ",
        " par(mfrow = c(2, 2))",
        "> ",
        "barplot(prob_fail, main = \"Counts Per Failure Probability\")",
        "> ",
        "barplot(stand_fail, main = \"Counts Per Failure Class\")",
        "> ",
        "hist(dat_fl$DBH_in, main = \"Tree Diameters\",",
        "+ ",
        "     xlab = \"Diameter at Breast Height (in)\")",
        "> ",
        "plot(dat_fl$DBH_in, dat_fl$HeighttoTop_ft, main = \"Tree Diameters By Height\")",
        "> ",
        " par(mfrow = c(2, 2))",
        "> ",
        "barplot(prob_fail, main = \"Counts Per Failure Probability\")",
        "> ",
        "barplot(stand_fail, main = \"Counts Per Failure Class\")",
        "> ",
        "hist(dat_fl$DBH_in, main = \"Tree Diameters\",",
        "+ ",
        "     xlab = \"Diameter at Breast Height (in)\")",
        "> ",
        "plot(dat_fl$DBH_in, dat_fl$HeighttoTop_ft, main = \"Tree Diameters By Height\",",
        "+ ",
        "     xlab = \"Diameter at Breast Height (in)\" ylab = \"Tree Height (ft)\")",
        "Error: unexpected symbol in:\n\"plot(dat_fl$DBH_in, dat_fl$HeighttoTop_ft, main = \"Tree Diameters By Height\",\n     xlab = \"Diameter at Breast Height (in)\" ylab\"\n",
        "> ",
        " par(mfrow = c(2, 2))",
        "> ",
        "barplot(prob_fail, main = \"Counts Per Failure Probability\")",
        "> ",
        "barplot(stand_fail, main = \"Counts Per Failure Class\")",
        "> ",
        "hist(dat_fl$DBH_in, main = \"Tree Diameters\",",
        "+ ",
        "     xlab = \"Diameter at Breast Height (in)\")",
        "> ",
        "plot(dat_fl$DBH_in, dat_fl$HeighttoTop_ft, main = \"Tree Diameters By Height\",",
        "+ ",
        "     xlab = \"Diameter at Breast Height (in)\", ylab = \"Tree Height (ft)\")",
        "> ",
        " par(mfrow = c(2, 2))",
        "> ",
        "barplot(prob_fail, main = \"Counts Per Failure Probability\", ",
        "+ ",
        "        xlab = \"Failure Likelihood Categories\")",
        "> ",
        "barplot(stand_fail, main = \"Counts Per Failure Class\", xlab = \"Failure Class\")",
        "> ",
        "hist(dat_fl$DBH_in, main = \"Tree Diameters\",",
        "+ ",
        "     xlab = \"Diameter at Breast Height (in)\")",
        "> ",
        "plot(dat_fl$DBH_in, dat_fl$HeighttoTop_ft, main = \"Tree Diameters By Height\",",
        "+ ",
        "     xlab = \"Diameter at Breast Height (in)\", ylab = \"Tree Height (ft)\")",
        "> ",
        " par(mfrow = c(2, 2))",
        "> ",
        "barplot(prob_fail, main = \"Counts Per Failure Probability\", ",
        "+ ",
        "        xlab = \"Failure Likelihood Categories\")",
        "> ",
        "barplot(stand_fail, main = \"Counts Per Failure Class\", xlab = \"Failure Class\")",
        "> ",
        "hist(dat_fl$DBH_in, main = \"Tree Diameters\",",
        "+ ",
        "     xlab = \"Diameter at Breast Height (in)\")",
        "> ",
        "plot(dat_fl$DBH_in, dat_fl$HeighttoTop_ft, main = \"Tree Diameters By Height\",",
        "+ ",
        "     xlab = \"Diameter at Breast Height (in)\", ylab = \"Tree Height (ft)\",",
        "+ ",
        "     col = adjustcolor(\"black\", alpha.f = 0.1))",
        "> ",
        " par(mfrow = c(2, 2))",
        "> ",
        "barplot(prob_fail, main = \"Counts Per Failure Probability\", ",
        "+ ",
        "        xlab = \"Failure Likelihood Categories\")",
        "> ",
        "barplot(stand_fail, main = \"Counts Per Failure Class\", xlab = \"Failure Class\")",
        "> ",
        "hist(dat_fl$DBH_in, main = \"Tree Diameters\",",
        "+ ",
        "     xlab = \"Diameter at Breast Height (in)\")",
        "> ",
        "plot(dat_fl$DBH_in, dat_fl$HeighttoTop_ft, main = \"Tree Diameters By Height\",",
        "+ ",
        "     xlab = \"Diameter at Breast Height (in)\", ylab = \"Tree Height (ft)\",",
        "+ ",
        "     col = adjustcolor(\"black\", alpha.f = 0.1), cex = 1)",
        "> ",
        " par(mfrow = c(2, 2))",
        "> ",
        "barplot(prob_fail, main = \"Counts Per Failure Probability\", ",
        "+ ",
        "        xlab = \"Failure Likelihood Categories\")",
        "> ",
        "barplot(stand_fail, main = \"Counts Per Failure Class\", xlab = \"Failure Class\")",
        "> ",
        "hist(dat_fl$DBH_in, main = \"Tree Diameters\",",
        "+ ",
        "     xlab = \"Diameter at Breast Height (in)\")",
        "> ",
        "plot(dat_fl$DBH_in, dat_fl$HeighttoTop_ft, main = \"Tree Diameters By Height\",",
        "+ ",
        "     xlab = \"Diameter at Breast Height (in)\", ylab = \"Tree Height (ft)\",",
        "+ ",
        "     col = adjustcolor(\"black\", alpha.f = 0.1), cex = 0.5)",
        "> ",
        " par(mfrow = c(2, 2))",
        "> ",
        "barplot(prob_fail, main = \"Counts Per Failure Probability\", ",
        "+ ",
        "        xlab = \"Failure Likelihood Categories\")",
        "> ",
        "barplot(stand_fail, main = \"Counts Per Failure Class\", xlab = \"Failure Class\")",
        "> ",
        "hist(dat_fl$DBH_in, main = \"Tree Diameters\",",
        "+ ",
        "     xlab = \"Diameter at Breast Height (in)\")",
        "> ",
        "plot(dat_fl$DBH_in, dat_fl$HeighttoTop_ft, main = \"Tree Diameters By Height\",",
        "+ ",
        "     xlab = \"Diameter at Breast Height (in)\", ylab = \"Tree Height (ft)\",",
        "+ ",
        "     col = adjustcolor(\"black\", alpha.f = 0.1), cex = 0.25)",
        "> ",
        " par(mfrow = c(2, 2))",
        "> ",
        "barplot(prob_fail, main = \"Counts Per Failure Probability\", ",
        "+ ",
        "        xlab = \"Failure Likelihood Categories\")",
        "> ",
        "barplot(stand_fail, main = \"Counts Per Failure Class\", xlab = \"Failure Class\")",
        "> ",
        "hist(dat_fl$DBH_in, main = \"Tree Diameters\",",
        "+ ",
        "     xlab = \"Diameter at Breast Height (in)\")",
        "> ",
        "plot(dat_fl$DBH_in, dat_fl$HeighttoTop_ft, main = \"Tree Diameters By Height\",",
        "+ ",
        "     xlab = \"Diameter at Breast Height (in)\", ylab = \"Tree Height (ft)\",",
        "+ ",
        "     col = adjustcolor(\"black\", alpha.f = 0.1), cex = 0.5)",
        "> ",
        "?ks.test()",
        "> ",
        "View(dat_fl)",
        "> ",
        "View(dat_fl)",
        "> ",
        "dat_dbh <- droplevels(subset(dat_fl, Failure_Standardized == \"branch\"))",
        "> ",
        "str(dat_dbh)",
        "'data.frame':\t438 obs. of  7 variables:\n $ DBH_in               : num  8.9 14.9 51 24 50.2 25.9 15.7 20.6 38.8 11.2 ...\n $ HeighttoTop_ft       : num  21 20.5 53 65.5 59.5 37.5 35 38.5 43 28.5 ...\n $ Species              : chr  \"baldcypress\" \"Weeping Bottlebrush\" \"Live oak\" \"slash pine\" ...\n $ CanopyWidth_ft       : num  NA 32 96 38 73 64 28 42 90 33 ...\n $ MostSignificantDefect: chr  \"\" \"Crack\" \"Dead\" \"\" ...\n $ Failure_Standardized : Factor w/ 1 level \"branch\": 1 1 1 1 1 1 1 1 1 1 ...\n $ ProbabilityofFailure ",
        ": Factor w/ 4 levels \"1\",\"2\",\"3\",\"4\": 1 2 4 1 3 2 4 2 2 1 ...\n",
        "> ",
        "dat_dbh <- droplevels(subset(dat_fl, Failure_Standardized != \"branch\"))",
        "> ",
        "str(dat_dbh)",
        "'data.frame':\t2608 obs. of  7 variables:\n $ DBH_in               : num  8 8 5.5 6.2 16 15.2 12.5 14.8 15.5 20.7 ...\n $ HeighttoTop_ft       : num  12.5 16 15.5 14 17 20 20.5 20.5 19.5 22.5 ...\n $ Species              : chr  \"Chinese elm\" \"Chinese elm\" \"Crapemyrtle\" \"Crapemyrtle\" ...\n $ CanopyWidth_ft       : num  13 20 15 24 27 19 21 19 25 27 ...\n $ MostSignificantDefect: chr  \"Dead\" \"Decay\" \"Poor Tree Architecture\" \"Poor Tree Architecture\" ...\n $ Failure_Standardized : Factor w/ 2 levels \"none\",\"whole\": 2 2 2 2 1 1 1 1 1 1",
        " ...\n $ ProbabilityofFailure : Factor w/ 4 levels \"1\",\"2\",\"3\",\"4\": 4 3 1 1 2 2 2 2 2 2 ...\n",
        "> ",
        "dat_dbh <- droplevels(subset(dat_fl, Failure_Standardized != \"branch\"))",
        "> ",
        "str(dat_dbh)",
        "'data.frame':\t2608 obs. of  7 variables:\n $ DBH_in               : num  8 8 5.5 6.2 16 15.2 12.5 14.8 15.5 20.7 ...\n $ HeighttoTop_ft       : num  12.5 16 15.5 14 17 20 20.5 20.5 19.5 22.5 ...\n $ Species              : chr  \"Chinese elm\" \"Chinese elm\" \"Crapemyrtle\" \"Crapemyrtle\" ...\n $ CanopyWidth_ft       : num  13 20 15 24 27 19 21 19 25 27 ...\n $ MostSignificantDefect: chr  \"Dead\" \"Decay\" \"Poor Tree Architecture\" \"Poor Tree Architecture\" ...\n $ Failure_Standardized : Factor w/ 2 levels \"none\",\"whole\": 2 2 2 2 1 1 1 1 1 1",
        " ...\n $ ProbabilityofFailure : Factor w/ 4 levels \"1\",\"2\",\"3\",\"4\": 4 3 1 1 2 2 2 2 2 2 ...\n",
        "> ",
        "ks.test(DBH_in ~ Failure_Standardized, data = dat_dbh)",
        "\n\tAsymptotic two-sample Kolmogorov-Smirnov test\n\ndata:  DBH_in by Failure_Standardized\nD = 0.10643, p-value = 0.02125\nalternative hypothesis: two-sided\n\n",
        "> ",
        "dat_dbh <- droplevels(subset(dat_fl, Failure_Standardized != \"branch\"))",
        "> ",
        "str(dat_dbh)",
        "'data.frame':\t2608 obs. of  7 variables:\n $ DBH_in               : num  8 8 5.5 6.2 16 15.2 12.5 14.8 15.5 20.7 ...\n $ HeighttoTop_ft       : num  12.5 16 15.5 14 17 20 20.5 20.5 19.5 22.5 ...\n $ Species              : chr  \"Chinese elm\" \"Chinese elm\" \"Crapemyrtle\" \"Crapemyrtle\" ...\n $ CanopyWidth_ft       : num  13 20 15 24 27 19 21 19 25 27 ...\n $ MostSignificantDefect: chr  \"Dead\" \"Decay\" \"Poor Tree Architecture\" \"Poor Tree Architecture\" ...\n $ Failure_Standardized : Factor w/ 2 levels \"none\",\"whole\": 2 2 2 2 1 1 1 1 1 1",
        " ...\n $ ProbabilityofFailure : Factor w/ 4 levels \"1\",\"2\",\"3\",\"4\": 4 3 1 1 2 2 2 2 2 2 ...\n",
        "> ",
        "tree_ks <- ks.test(DBH_in ~ Failure_Standardized, data = dat_dbh)",
        "> ",
        "is.na(dat_fl)",
        "        DBH_in HeighttoTop_ft Species CanopyWidth_ft MostSignificantDefect\n   [1,]  FALSE          FALSE   FALSE          FALSE                 FALSE\n   [2,]  FALSE          FALSE   FALSE          FALSE                 FALSE\n   [3,]  FALSE          FALSE   FALSE          FALSE                 FALSE\n   [4,]  FALSE          FALSE   FALSE          FALSE                 FALSE\n   [5,]  FALSE          FALSE   FALSE          FALSE                 FALSE\n   [6,]  FALSE          FALSE   FALSE          FALSE                 FALSE",
        "\n   [7,]  FALSE          FALSE   FALSE          FALSE                 FALSE\n   [8,]  FALSE          FALSE   FALSE          FALSE                 FALSE\n   [9,]  FALSE          FALSE   FALSE          FALSE                 FALSE\n  [10,]  FALSE          FALSE   FALSE          FALSE                 FALSE\n  [11,]  FALSE          FALSE   FALSE          FALSE                 FALSE\n  [12,]  FALSE          FALSE   FALSE          FALSE                 FALSE\n  [13,]  FALSE          FALSE   FALSE           TRUE                 FALSE",
        "\n  [14,]  FALSE          FALSE   FALSE           TRUE                 FALSE\n  [15,]  FALSE          FALSE   FALSE           TRUE                 FALSE\n  [16,]  FALSE          FALSE   FALSE           TRUE                 FALSE\n  [17,]  FALSE          FALSE   FALSE           TRUE                 FALSE\n  [18,]  FALSE          FALSE   FALSE           TRUE                 FALSE\n  [19,]  FALSE          FALSE   FALSE           TRUE                 FALSE\n  [20,]  FALSE          FALSE   FALSE           TRUE                 FALSE",
        "\n  [21,]  FALSE          FALSE   FALSE           TRUE                 FALSE\n  [22,]  FALSE          FALSE   FALSE           TRUE                 FALSE\n  [23,]  FALSE          FALSE   FALSE           TRUE                 FALSE\n  [24,]  FALSE          FALSE   FALSE           TRUE                 FALSE\n  [25,]  FALSE          FALSE   FALSE           TRUE                 FALSE\n  [26,]  FALSE          FALSE   FALSE           TRUE                 FALSE\n  [27,]  FALSE          FALSE   FALSE           TRUE                 FALSE",
        "\n  [28,]  FALSE          FALSE   FALSE           TRUE                 FALSE\n  [29,]  FALSE          FALSE   FALSE           TRUE                 FALSE\n  [30,]  FALSE          FALSE   FALSE           TRUE                 FALSE\n  [31,]  FALSE          FALSE   FALSE           TRUE                 FALSE\n  [32,]  FALSE          FALSE   FALSE           TRUE                 FALSE\n  [33,]  FALSE          FALSE   FALSE           TRUE                 FALSE\n  [34,]  FALSE          FALSE   FALSE           TRUE                 FALSE",
        "\n  [35,]  FALSE          FALSE   FALSE           TRUE                 FALSE\n  [36,]  FALSE          FALSE   FALSE           TRUE                 FALSE\n  [37,]  FALSE          FALSE   FALSE           TRUE                 FALSE\n  [38,]  FALSE          FALSE   FALSE           TRUE                 FALSE\n  [39,]  FALSE          FALSE   FALSE           TRUE                 FALSE\n  [40,]  FALSE          FALSE   FALSE           TRUE                 FALSE\n  [41,]  FALSE          FALSE   FALSE           TRUE                 FALSE",
        "\n  [42,]  FALSE          FALSE   FALSE           TRUE                 FALSE\n  [43,]  FALSE          FALSE   FALSE           TRUE                 FALSE\n  [44,]  FALSE          FALSE   FALSE           TRUE                 FALSE\n  [45,]  FALSE          FALSE   FALSE           TRUE                 FALSE\n  [46,]  FALSE          FALSE   FALSE           TRUE                 FALSE\n  [47,]  FALSE          FALSE   FALSE           TRUE                 FALSE\n  [48,]  FALSE          FALSE   FALSE           TRUE                 FALSE",
        "\n  [49,]  FALSE          FALSE   FALSE           TRUE                 FALSE\n  [50,]  FALSE          FALSE   FALSE           TRUE                 FALSE\n  [51,]  FALSE          FALSE   FALSE           TRUE                 FALSE\n  [52,]  FALSE          FALSE   FALSE           TRUE                 FALSE\n  [53,]  FALSE          FALSE   FALSE           TRUE                 FALSE\n  [54,]  FALSE          FALSE   FALSE          FALSE                 FALSE\n  [55,]  FALSE          FALSE   FALSE          FALSE                 FALSE",
        "\n  [56,]  FALSE          FALSE   FALSE          FALSE                 FALSE\n  [57,]  FALSE          FALSE   FALSE          FALSE                 FALSE\n  [58,]  FALSE          FALSE   FALSE          FALSE                 FALSE\n  [59,]  FALSE          FALSE   FALSE          FALSE                 FALSE\n  [60,]  FALSE          FALSE   FALSE          FALSE                 FALSE\n  [61,]  FALSE          FALSE   FALSE          FALSE                 FALSE\n  [62,]  FALSE          FALSE   FALSE          FALSE                 FALSE",
        "\n  [63,]  FALSE          FALSE   FALSE          FALSE                 FALSE\n  [64,]  FALSE          FALSE   FALSE          FALSE                 FALSE\n  [65,]  FALSE          FALSE   FALSE          FALSE                 FALSE\n  [66,]  FALSE          FALSE   FALSE          FALSE                 FALSE\n  [67,]  FALSE          FALSE   FALSE          FALSE                 FALSE\n  [68,]  FALSE          FALSE   FALSE          FALSE                 FALSE\n  [69,]  FALSE          FALSE   FALSE          FALSE                 FALSE",
        "\n  [70,]  FALSE          FALSE   FALSE          FALSE                 FALSE\n  [71,]  FALSE          FALSE   FALSE          FALSE                 FALSE\n  [72,]  FALSE          FALSE   FALSE          FALSE                 FALSE\n  [73,]  FALSE          FALSE   FALSE          FALSE                 FALSE\n  [74,]  FALSE          FALSE   FALSE          FALSE                 FALSE\n  [75,]  FALSE          FALSE   FALSE          FALSE                 FALSE\n  [76,]  FALSE          FALSE   FALSE          FALSE                 FALSE",
        "\n  [77,]  FALSE          FALSE   FALSE          FALSE                 FALSE\n  [78,]  FALSE          FALSE   FALSE          FALSE                 FALSE\n  [79,]  FALSE          FALSE   FALSE          FALSE                 FALSE\n  [80,]  FALSE          FALSE   FALSE          FALSE                 FALSE\n  [81,]  FALSE          FALSE   FALSE          FALSE                 FALSE\n  [82,]  FALSE          FALSE   FALSE          FALSE                 FALSE\n  [83,]  FALSE          FALSE   FALSE          FALSE                 FALSE",
        "\n  [84,]  FALSE          FALSE   FALSE          FALSE                 FALSE\n  [85,]  FALSE          FALSE   FALSE          FALSE                 FALSE\n  [86,]  FALSE          FALSE   FALSE          FALSE                 FALSE\n  [87,]  FALSE          FALSE   FALSE          FALSE                 FALSE\n  [88,]  FALSE          FALSE   FALSE          FALSE                 FALSE\n  [89,]  FALSE          FALSE   FALSE          FALSE                 FALSE\n  [90,]  FALSE          FALSE   FALSE          FALSE                 FALSE",
        "\n  [91,]  FALSE          FALSE   FALSE          FALSE                 FALSE\n  [92,]  FALSE          FALSE   FALSE          FALSE                 FALSE\n  [93,]  FALSE          FALSE   FALSE          FALSE                 FALSE\n  [94,]  FALSE          FALSE   FALSE          FALSE                 FALSE\n  [95,]  FALSE          FALSE   FALSE          FALSE                 FALSE\n  [96,]  FALSE          FALSE   FALSE          FALSE                 FALSE\n  [97,]  FALSE          FALSE   FALSE          FALSE                 FALSE",
        "\n  [98,]  FALSE          FALSE   FALSE          FALSE                 FALSE\n  [99,]  FALSE          FALSE   FALSE          FALSE                 FALSE\n [100,]  FALSE          FALSE   FALSE          FALSE                 FALSE\n [101,]  FALSE          FALSE   FALSE          FALSE                 FALSE\n [102,]  FALSE          FALSE   FALSE          FALSE                 FALSE\n [103,]  FALSE          FALSE   FALSE          FALSE                 FALSE\n [104,]  FALSE          FALSE   FALSE          FALSE                 FALSE",
        "\n [105,]  FALSE          FALSE   FALSE          FALSE                 FALSE\n [106,]  FALSE          FALSE   FALSE          FALSE                 FALSE\n [107,]  FALSE          FALSE   FALSE          FALSE                 FALSE\n [108,]  FALSE          FALSE   FALSE          FALSE                 FALSE\n [109,]  FALSE          FALSE   FALSE          FALSE                 FALSE\n [110,]  FALSE          FALSE   FALSE          FALSE                 FALSE\n [111,]  FALSE          FALSE   FALSE          FALSE                 FALSE",
        "\n [112,]  FALSE          FALSE   FALSE          FALSE                 FALSE\n [113,]  FALSE          FALSE   FALSE          FALSE                 FALSE\n [114,]  FALSE          FALSE   FALSE          FALSE                 FALSE\n [115,]  FALSE          FALSE   FALSE          FALSE                 FALSE\n [116,]  FALSE          FALSE   FALSE          FALSE                 FALSE\n [117,]  FALSE          FALSE   FALSE          FALSE                 FALSE\n [118,]  FALSE          FALSE   FALSE          FALSE                 FALSE",
        "\n [119,]  FALSE          FALSE   FALSE          FALSE                 FALSE\n [120,]  FALSE          FALSE   FALSE          FALSE                 FALSE\n [121,]  FALSE          FALSE   FALSE          FALSE                 FALSE\n [122,]  FALSE          FALSE   FALSE          FALSE                 FALSE\n [123,]  FALSE          FALSE   FALSE          FALSE                 FALSE\n [124,]  FALSE          FALSE   FALSE          FALSE                 FALSE\n [125,]  FALSE          FALSE   FALSE          FALSE                 FALSE",
        "\n [126,]  FALSE          FALSE   FALSE          FALSE                 FALSE\n [127,]  FALSE          FALSE   FALSE          FALSE                 FALSE\n [128,]  FALSE          FALSE   FALSE          FALSE                 FALSE\n [129,]  FALSE          FALSE   FALSE          FALSE                 FALSE\n [130,]  FALSE          FALSE   FALSE          FALSE                 FALSE\n [131,]  FALSE          FALSE   FALSE          FALSE                 FALSE\n [132,]  FALSE          FALSE   FALSE          FALSE                 FALSE",
        "\n [133,]  FALSE          FALSE   FALSE          FALSE                 FALSE\n [134,]  FALSE          FALSE   FALSE          FALSE                 FALSE\n [135,]  FALSE          FALSE   FALSE          FALSE                 FALSE\n [136,]  FALSE          FALSE   FALSE          FALSE                 FALSE\n [137,]  FALSE          FALSE   FALSE          FALSE                 FALSE\n [138,]  FALSE          FALSE   FALSE          FALSE                 FALSE\n [139,]  FALSE          FALSE   FALSE          FALSE                 FALSE",
        "\n [140,]  FALSE          FALSE   FALSE          FALSE                 FALSE\n [141,]  FALSE          FALSE   FALSE          FALSE                 FALSE\n [142,]  FALSE          FALSE   FALSE          FALSE                 FALSE\n        Failure_Standardized ProbabilityofFailure\n   [1,]                FALSE                FALSE\n   [2,]                FALSE                FALSE\n   [3,]                FALSE                FALSE\n   [4,]                FALSE                FALSE\n   [5,]                FALSE                FALSE",
        "\n   [6,]                FALSE                FALSE\n   [7,]                FALSE                FALSE\n   [8,]                FALSE                FALSE\n   [9,]                FALSE                FALSE\n  [10,]                FALSE                FALSE\n  [11,]                FALSE                FALSE\n  [12,]                FALSE                FALSE\n  [13,]                FALSE                FALSE\n  [14,]                FALSE                FALSE\n  [15,]                FALSE                FALSE\n  [16,]                FALSE",
        "                FALSE\n  [17,]                FALSE                FALSE\n  [18,]                FALSE                FALSE\n  [19,]                FALSE                FALSE\n  [20,]                FALSE                FALSE\n  [21,]                FALSE                FALSE\n  [22,]                FALSE                FALSE\n  [23,]                FALSE                FALSE\n  [24,]                FALSE                FALSE\n  [25,]                FALSE                FALSE\n  [26,]                FALSE                FALSE",
        "\n  [27,]                FALSE                FALSE\n  [28,]                FALSE                FALSE\n  [29,]                FALSE                FALSE\n  [30,]                FALSE                FALSE\n  [31,]                FALSE                FALSE\n  [32,]                FALSE                FALSE\n  [33,]                FALSE                FALSE\n  [34,]                FALSE                FALSE\n  [35,]                FALSE                FALSE\n  [36,]                FALSE                FALSE\n  [37,]                FALSE",
        "                FALSE\n  [38,]                FALSE                FALSE\n  [39,]                FALSE                FALSE\n  [40,]                FALSE                FALSE\n  [41,]                FALSE                FALSE\n  [42,]                FALSE                FALSE\n  [43,]                FALSE                FALSE\n  [44,]                FALSE                FALSE\n  [45,]                FALSE                FALSE\n  [46,]                FALSE                FALSE\n  [47,]                FALSE                FALSE",
        "\n  [48,]                FALSE                FALSE\n  [49,]                FALSE                FALSE\n  [50,]                FALSE                FALSE\n  [51,]                FALSE                FALSE\n  [52,]                FALSE                FALSE\n  [53,]                FALSE                FALSE\n  [54,]                FALSE                FALSE\n  [55,]                FALSE                FALSE\n  [56,]                FALSE                FALSE\n  [57,]                FALSE                FALSE\n  [58,]                FALSE",
        "                FALSE\n  [59,]                FALSE                FALSE\n  [60,]                FALSE                FALSE\n  [61,]                FALSE                FALSE\n  [62,]                FALSE                FALSE\n  [63,]                FALSE                FALSE\n  [64,]                FALSE                FALSE\n  [65,]                FALSE                FALSE\n  [66,]                FALSE                FALSE\n  [67,]                FALSE                FALSE\n  [68,]                FALSE                FALSE",
        "\n  [69,]                FALSE                FALSE\n  [70,]                FALSE                FALSE\n  [71,]                FALSE                FALSE\n  [72,]                FALSE                FALSE\n  [73,]                FALSE                FALSE\n  [74,]                FALSE                FALSE\n  [75,]                FALSE                FALSE\n  [76,]                FALSE                FALSE\n  [77,]                FALSE                FALSE\n  [78,]                FALSE                FALSE\n  [79,]                FALSE",
        "                FALSE\n  [80,]                FALSE                FALSE\n  [81,]                FALSE                FALSE\n  [82,]                FALSE                FALSE\n  [83,]                FALSE                FALSE\n  [84,]                FALSE                FALSE\n  [85,]                FALSE                FALSE\n  [86,]                FALSE                FALSE\n  [87,]                FALSE                FALSE\n  [88,]                FALSE                FALSE\n  [89,]                FALSE                FALSE",
        "\n  [90,]                FALSE                FALSE\n  [91,]                FALSE                FALSE\n  [92,]                FALSE                FALSE\n  [93,]                FALSE                FALSE\n  [94,]                FALSE                FALSE\n  [95,]                FALSE                FALSE\n  [96,]                FALSE                FALSE\n  [97,]                FALSE                FALSE\n  [98,]                FALSE                FALSE\n  [99,]                FALSE                FALSE\n [100,]                FALSE",
        "                FALSE\n [101,]                FALSE                FALSE\n [102,]                FALSE                FALSE\n [103,]                FALSE                FALSE\n [104,]                FALSE                FALSE\n [105,]                FALSE                FALSE\n [106,]                FALSE                FALSE\n [107,]                FALSE                FALSE\n [108,]                FALSE                FALSE\n [109,]                FALSE                FALSE\n [110,]                FALSE                FALSE",
        "\n [111,]                FALSE                FALSE\n [112,]                FALSE                FALSE\n [113,]                FALSE                FALSE\n [114,]                FALSE                FALSE\n [115,]                FALSE                FALSE\n [116,]                FALSE                FALSE\n [117,]                FALSE                FALSE\n [118,]                FALSE                FALSE\n [119,]                FALSE                FALSE\n [120,]                FALSE                FALSE\n [121,]                FALSE",
        "                FALSE\n [122,]                FALSE                FALSE\n [123,]                FALSE                FALSE\n [124,]                FALSE                FALSE\n [125,]                FALSE                FALSE\n [126,]                FALSE                FALSE\n [127,]                FALSE                FALSE\n [128,]                FALSE                FALSE\n [129,]                FALSE                FALSE\n [130,]                FALSE                FALSE\n [131,]                FALSE                FALSE",
        "\n [132,]                FALSE                FALSE\n [133,]                FALSE                FALSE\n [134,]                FALSE                FALSE\n [135,]                FALSE                FALSE\n [136,]                FALSE                FALSE\n [137,]                FALSE                FALSE\n [138,]                FALSE                FALSE\n [139,]                FALSE                FALSE\n [140,]                FALSE                FALSE\n [141,]                FALSE                FALSE\n [142,]                FALSE",
        "                FALSE\n [ reached getOption(\"max.print\") -- omitted 2904 rows ]\n",
        "> ",
        "sum(is.na(dat_fl))",
        "[1] 464\n",
        "> ",
        " par(mfrow = c(2, 2))",
        "> ",
        "barplot(prob_fail, main = \"Counts Per Failure Probability\", ",
        "+ ",
        "        xlab = \"Failure Likelihood Categories\")",
        "> ",
        "barplot(stand_fail, main = \"Counts Per Failure Class\", xlab = \"Failure Class\")",
        "> ",
        "hist(dat_fl$DBH_in, main = \"Tree Diameters\",",
        "+ ",
        "     xlab = \"Diameter at Breast Height (in)\")",
        "> ",
        "plot(dat_fl$DBH_in, dat_fl$HeighttoTop_ft, main = \"Tree Diameters By Height\",",
        "+ ",
        "     xlab = \"Diameter at Breast Height (in)\", ylab = \"Tree Height (ft)\",",
        "+ ",
        "     col = adjustcolor(\"black\", alpha.f = 0.1), cex = 0.5)",
        "> ",
        "?cor.test()",
        "> ",
        "cor.test(HeighttoTop_ft ~ DBH_in, data = dat_fl",
        "+ ",
        "  use='complete.obs',",
        "Error: unexpected symbol in:\n\"cor.test(HeighttoTop_ft ~ DBH_in, data = dat_fl\n  use\"\n",
        "> ",
        "cor.test(HeighttoTop_ft ~ DBH_in, data = dat_fl,",
        "+ ",
        "  use='complete.obs',",
        "+ ",
        "  method='spearman')",
        "Error in cor.test.formula(HeighttoTop_ft ~ DBH_in, data = dat_fl, use = \"complete.obs\",  : \n  'formula' missing or invalid\n",
        "> ",
        "cor.test(formula = HeighttoTop_ft ~ DBH_in, data = dat_fl,",
        "+ ",
        "  use='complete.obs',",
        "+ ",
        "  method='spearman')",
        "Error in cor.test.formula(formula = HeighttoTop_ft ~ DBH_in, data = dat_fl,  : \n  'formula' missing or invalid\n",
        "> ",
        "cor.test(dat_fl$DBH_in, dat_fl$HeighttoTop_ft, use='complete.obs', method='spearman')",
        "\n\tSpearman's rank correlation rho\n\ndata:  dat_fl$DBH_in and dat_fl$HeighttoTop_ft\nS = 541454081, p-value < 2.2e-16\nalternative hypothesis: true rho is not equal to 0\nsample estimates:\n      rho \n0.8850462 \n\n",
        "> ",
        "cor.test(dat_fl$DBH_in, dat_fl$HeighttoTop_ft, use='complete.obs')",
        "\n\tPearson's product-moment correlation\n\ndata:  dat_fl$DBH_in and dat_fl$HeighttoTop_ft\nt = 77.778, df = 3044, p-value < 2.2e-16\nalternative hypothesis: true correlation is not equal to 0\n95 percent confidence interval:\n 0.8033874 0.8271846\nsample estimates:\n      cor \n0.8156306 \n\n",
        "> ",
        "cor.test(dat_fl$DBH_in, dat_fl$HeighttoTop_ft, use='complete.obs', method='spearman')",
        "\n\tSpearman's rank correlation rho\n\ndata:  dat_fl$DBH_in and dat_fl$HeighttoTop_ft\nS = 541454081, p-value < 2.2e-16\nalternative hypothesis: true rho is not equal to 0\nsample estimates:\n      rho \n0.8850462 \n\n",
        "> ",
        "tree_cor <- cor.test(dat_fl$DBH_in, dat_fl$HeighttoTop_ft, ",
        "+ ",
        "                     use='complete.obs', method='spearman')",
        "> ",
        "cor.test(dat_fl$DBH_in, dat_fl$HeighttoTop_ft, ",
        "+ ",
        "                     use='complete.obs')",
        "\n\tPearson's product-moment correlation\n\ndata:  dat_fl$DBH_in and dat_fl$HeighttoTop_ft\nt = 77.778, df = 3044, p-value < 2.2e-16\nalternative hypothesis: true correlation is not equal to 0\n95 percent confidence interval:\n 0.8033874 0.8271846\nsample estimates:\n      cor \n0.8156306 \n\n",
        "> ",
        "View(tree_cor)",
        "> ",
        "cor.test(dat_fl$DBH_in, dat_fl$HeighttoTop_ft, ",
        "+ ",
        "                     use='complete.obs', method='spearman')",
        "\n\tSpearman's rank correlation rho\n\ndata:  dat_fl$DBH_in and dat_fl$HeighttoTop_ft\nS = 541454081, p-value < 2.2e-16\nalternative hypothesis: true rho is not equal to 0\nsample estimates:\n      rho \n0.8850462 \n\n",
        "> ",
        "tree_cor <- cor.test(dat_fl$DBH_in, dat_fl$HeighttoTop_ft, ",
        "+ ",
        "                     use='complete.obs', method='spearman')",
        "> ",
        "library(tidyverse)",
        "> ",
        "library(magrittr)",
        "> ",
        "install.packages(\"kableExtra\")",
        "trying URL 'https://cran.rstudio.com/bin/macosx/contrib/4.2/svglite_2.1.0.tgz'\n",
        "Content type 'application/x-gzip'",
        " length 918168 bytes (896 KB)\n",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "\n",
        "downloaded 896 KB\n\n",
        "trying URL 'https://cran.rstudio.com/bin/macosx/contrib/4.2/kableExtra_1.3.4.tgz'\n",
        "Content type 'application/x-gzip'",
        " length 1844181 bytes (1.8 MB)\n",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "\n",
        "downloaded 1.8 MB\n\n",
        "\nThe downloaded binary packages are in\n\t/var/folders/3z/r670qdhx521cfkgfmyzcp2xr0000gn/T//RtmplAwkqV/downloaded_packages\n",
        "> ",
        "library(kableExtra)",
        "> ",
        "dat_fl$fail = factor(dat_fl$Failure_Standardized != \"none\")",
        "> ",
        "levels(dat_fl$fail) = c(\"No Fail\", \"Fail\")",
        "> ",
        "fl_table_2 = table(",
        "+ ",
        "  dat_fl$ProbabilityofFailure,",
        "+ ",
        "  dat_fl$fail)",
        "> ",
        "fl_table_2",
        "   \n    No Fail Fail\n  1    1239  168\n  2     670  219\n  3     421  206\n  4      53   63\n",
        "> ",
        "dat_fl$fail = factor(dat_fl$Failure_Standardized != \"none\")",
        "> ",
        "levels(dat_fl$fail) = c(\"No Fail\", \"Fail\")",
        "> ",
        "fl_table_2 = table(dat_fl$ProbabilityofFailure, dat_fl$fail)",
        "> ",
        "fl_table_2",
        "   \n    No Fail Fail\n  1    1239  168\n  2     670  219\n  3     421  206\n  4      53   63\n",
        "> ",
        "chi_tree <- chisq.test(fl_table_2)",
        "> ",
        "chi_tree",
        "\n\tPearson's Chi-squared test\n\ndata:  fl_table_2\nX-squared = 202.65, df = 3, p-value < 2.2e-16\n\n",
        "> ",
        "View(chi_tree)",
        "> ",
        "View(chi_tree)",
        "> ",
        "View(chi_tree)",
        "Quitting from lines 218-222 (Guitart_Lab09.Rmd) \n",
        "> ",
        "View(chi_tree)",
        "> ",
        "chi_tree$residuals",
        "   \n      No Fail      Fail\n  1  4.085887 -7.787471\n  2 -1.026413  1.956286\n  3 -3.186511  6.073311\n  4 -3.980179  7.585998\n",
        "Quitting from lines 240-244 (Guitart_Lab09.Rmd) \n",
        "> ",
        "chi_tree$observed",
        "   \n    No Fail Fail\n  1    1239  168\n  2     670  219\n  3     421  206\n  4      53   63\n",
        "> ",
        "chi_tree$expected",
        "   \n       No Fail      Fail\n  1 1103.28430 303.71570\n  2  697.10003 191.89997\n  3  491.65548 135.34452\n  4   90.96018  25.03982\n",
        "> ",
        "chi_tree$residuals",
        "   \n      No Fail      Fail\n  1  4.085887 -7.787471\n  2 -1.026413  1.956286\n  3 -3.186511  6.073311\n  4 -3.980179  7.585998\n",
        "> ",
        "chi_tree$residuals",
        "   \n      No Fail      Fail\n  1  4.085887 -7.787471\n  2 -1.026413  1.956286\n  3 -3.186511  6.073311\n  4 -3.980179  7.585998\n",
        "> ",
        "chi_tree$expected",
        "   \n       No Fail      Fail\n  1 1103.28430 303.71570\n  2  697.10003 191.89997\n  3  491.65548 135.34452\n  4   90.96018  25.03982\n",
        "> ",
        "chi_tree$observed",
        "   \n    No Fail Fail\n  1    1239  168\n  2     670  219\n  3     421  206\n  4      53   63\n",
        "> ",
        "{",
        "+ ",
        "dat_fl <- read.csv(here(\"data\", \"trees_FL.csv\"))",
        "+ ",
        "head(dat_fl, 4)",
        "+ ",
        "dat_fl$ProbabilityofFailure <- as.factor(dat_fl$ProbabilityofFailure)",
        "+ ",
        "dat_fl$Failure_Standardized <- as.factor(dat_fl$Failure_Standardized)",
        "+ ",
        "str(dat_fl)",
        "+ ",
        "prob_fail <- table(dat_fl$ProbabilityofFailure)",
        "+ ",
        "stand_fail <- table(dat_fl$Failure_Standardized)",
        "+ ",
        "}",
        "'data.frame':\t3046 obs. of  7 variables:\n $ DBH_in               : num  8 8 5.5 6.2 16 15.2 12.5 14.8 15.5 20.7 ...\n $ HeighttoTop_ft       : num  12.5 16 15.5 14 17 20 20.5 20.5 19.5 22.5 ...\n $ Species              : chr  \"Chinese elm\" \"Chinese elm\" \"Crapemyrtle\" \"Crapemyrtle\" ...\n $ CanopyWidth_ft       : num  13 20 15 24 27 19 21 19 25 27 ...\n $ MostSignificantDefect: chr  \"Dead\" \"Decay\" \"Poor Tree Architecture\" \"Poor Tree Architecture\" ...\n $ Failure_Standardized : Factor w/ 3 levels \"branch\",\"none\",..: ",
        "3 3 3 3 2 2 2 2 2 2 ...\n $ ProbabilityofFailure : Factor w/ 4 levels \"1\",\"2\",\"3\",\"4\": 4 3 1 1 2 2 2 2 2 2 ...\n\nRestarting R session...\n\n"
    ]
}