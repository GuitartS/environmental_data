shapiro.test(bs_resids)
shapiro.test(pi_resids)
shapiro.test(sb_resids)
shapiro.test(vel_resids)
shapiro.test(xtc_resids)
shapiro.test(blaze_resids)
shapiro.test(bs_resids)
shapiro.test(pi_resids)
shapiro.test(sb_resids)
shapiro.test(vel_resids)
shapiro.test(xtc_resids)
shapiro.test(blaze_resids)
shapiro.test(bs_resids)
shapiro.test(pi_resids)
shapiro.test(sb_resids)
shapiro.test(vel_resids)
shapiro.test(xtc_resids)
require(palmerpenguins)
pen_fem = subset(penguins, sex == "female")
boxplot(body_mass_g ~ species, data = pen_fem)
require(palmerpenguins)
pen_fem = subset(penguins, sex == "female")
boxplot(body_mass_g ~ species, data = pen_fem, xlab = "Species", ylab = "Body Mass (g)")
bartlett.test(body_magg_g ~ species, data = pen_fem)
bartlett.test(body_mass_g ~ species, data = pen_fem)
pen_bart <- bartlett.test(body_mass_g ~ species, data = pen_fem)
fit_pen <- lm(body_mass_g ~ species, data = pen_fem)
residuals(fit_pen)
pen_resids <- residuals(fit_pen)
shapiro.test(pen_resids)
pen_shapiro <- shapiro.test(pen_resids)
pen_hsd = TukeyHSD(aov(pen_fit))
pen_hsd = TukeyHSD(aov(fit_pen))
class(pen_hsd)
View(pen_hsd)
round(pen_hsd$species, digits = 4)
library(here)
rope <- read.csv(here("data", "rope.csv"))
head(rope)
dim(rope)
str(rope)
sum(is.na(rope))
unique(rope$rope.type)
rope$rope.type <- as.factor(rope$rope.type)
str(rope)
levels(rope$rope.type)
n_obs <- nrow(rope)
n_obs
dim(rope)
n_groups <- nlevels(rope$rope.type)
n_groups
mean_cut <- mean(rope$p.cut)
mean_cut
sum_of_squares <- function(n)
{
(sum((n - mean_cut)^2))
}
ss_tot <- sum_of_squares(rope$p.cut)
agg_resids <-aggregate(
x = rope$p.cut,
by = list(rope$rope.type),
FUN = function(x) x-mean(x))
agg_sum_sq_resids <-aggregate(
x = rope$p.cut,
by = list(rope$rope.type),
FUN = function(x) sum((x-mean(x))^2))
ss_within <- sum(agg_sum_sq_resids$x)
ss_among <- ss_tot - ss_within
df_tot <- n_obs - 1
df_within <- n_obs - n_groups
df_among <- n_groups - 1
ms_among <- ss_among/df_among
ms_within <- ss_within/df_within
f_ratio <- ms_among / ms_within
f_pval <- 1-pf(f_ratio, df1 = df_among, df_within)
# number comparison tolerance
digits_check = 5
# Build the reference model using R functions
fit_1 = lm(p.cut ~ rope.type, data=rope)
anova(fit_1)
anova_fit_1 = anova(fit_1)
# Check degrees of freedom
anova_fit_1$Df == c(df_among, df_within)
# Check sums of squares
round(anova_fit_1$`Sum Sq`, digits = digits_check) == round(c(ss_among, ss_within), digits = digits_check)
# Check mean squares
round(anova_fit_1$`Mean Sq`, digits = digits_check) == round(c(ms_among, ms_within), digits = digits_check)
# Check the F-ratio
round(anova_fit_1$`F value`[1], digits = digits_check) == round(f_ratio, digits = digits_check)
# Check the F test statistic p-value
round(anova_fit_1$`Pr(>F)`[1], digits = digits_check) == round(f_pval, digits = digits_check)
rope_bart <- bartlett.test(p.cut ~ rope.type, data = rope)
rope_bart
unique(rope$rope.type)
fit_rope_1 = lm(p.cut ~ rope.type, data = rope)
summary(fit_rope_1)
base <- round(fit_rope_1$coefficients[1] + 0, digits = 3)
xtc <- base + round(fit_rope_1$coefficients[6], digits = 3)
fit_rope_1$coefficients[6]
overall_resids <- residuals(fit_rope_1)
model_shapiro <- shapiro.test(overall_resids)
blaze_resids <- unlist(agg_resids$x[1])
bs_resids <- unlist(agg_resids$x[2])
pi_resids <- unlist(agg_resids$x[3])
sb_resids <- unlist(agg_resids$x[4])
vel_resids <- unlist(agg_resids$x[5])
xtc_resids <- unlist(agg_resids$x[6])
shapiro.test(blaze_resids)
shapiro.test(bs_resids)
shapiro.test(pi_resids)
shapiro.test(sb_resids)
shapiro.test(vel_resids)
shapiro.test(xtc_resids)
require(palmerpenguins)
pen_fem = subset(penguins, sex == "female")
boxplot(body_mass_g ~ species, data = pen_fem, xlab = "Species", ylab = "Body Mass (g)")
pen_bart <- bartlett.test(body_mass_g ~ species, data = pen_fem)
fit_pen <- lm(body_mass_g ~ species, data = pen_fem)
pen_resids <- residuals(fit_pen)
pen_shapiro <- shapiro.test(pen_resids)
pen_hsd = TukeyHSD(aov(fit_pen))
class(pen_hsd)
round(pen_hsd$species, digits = 4)
fit_rope_1$coefficients[6]
xtc <- base + round(fit_rope_1$coefficients[6], digits = 3)
## lab 11 walk through
library(here)
bird <- read.csv(here("data", "bird.sub.csv"))
hab <- read.csv(here("data", "hab.sub.csv"))
?merge()
birdhab <- merge(bird, hab)
dim(birdhab)
str(birdhab)
plot(birdhab$ls, birdhab$BRCR)
fit_1 <- lm(BRCR ~ las, data = birdhab)
fit_1 <- lm(BRCR ~ ls, data = birdhab)
abline(fit_1)
summary(fit_1)
t.test(subset(penguins, species == "Gentoo")$flipper_length_mm)
penguins <- load("palmerpenguins")
penguins <- require("palmerpenguins")
t.test(subset(penguins, species == "Gentoo")$flipper_length_mm)
head(penguins)
require("palmerpenguins")
t.test(subset(penguins, species == "Gentoo")$flipper_length_mm)
require(palmerpenguins)
t.test(subset(penguins, species == "Gentoo")$flipper_length_mm)
head(penguins)
require(palmerpenguins)
t.test(subset(penguins, species == "Gentoo")$flipper_length_mm)
t.test(
x = subset(penguins, species == "Gentoo")$flipper_length_mm,
mu = 218
)
t.test(
x = subset(penguins, species == "Gentoo")$flipper_length_mm,
mu = 218,
alternative = "less"
)
t.test(flipper_length_mm ~ species, data = subset(penguins, species != "Chinstrap"))
par(mfrow = c(1, 2))
hist(penguins$body_mass_g, breaks = 80, main = "histogram of body mass", xlab = "body mass (g)")
plot(density(penguins$body_mass_g, na.rm = TRUE), main = "density plot of body mass")
boxplot(body_mass_g ~ species, data = penguins)
dev.off()
boxplot(body_mass_g ~ species, data = penguins)
dat_chinstrap = subset(penguins, species == "Chinstrap")
mean(dat_chinstrap$body_mass_g, na.rm = TRUE)
shapiro.test(dat_chinstrap$body_mass_g)
aggregate(body_mass_g ~ species, data = penguins, FUN = mean)
aggregate(
body_mass_g ~ species,
data = penguins,
FUN = function(x) shapiro.test(x)$p.value)
fit_species = lm(body_mass_g ~ species, data = penguins)
summary(fit_species)
anova(fit_species)
fit_species = lm(body_mass_g ~ species, data = penguins)
summary(fit_species)
anova(fit_species)
fit_additive = lm(body_mass_g ~ sex + species, data = penguins)
fit_additive = lm(body_mass_g ~ sex * species, data = penguins)
summary(fit_additive)
lm(bill_length_mm ~ body_mass_g, data = penguins)
boxplot(body_mass_g ~ sex * species, data = penguins)
require(palmerpenguins)
t.test(subset(penguins, species == "Gentoo")$flipper_length_mm)
t.test(
x = subset(penguins, species == "Gentoo")$flipper_length_mm,
mu = 218
)
t.test(
x = subset(penguins, species == "Gentoo")$flipper_length_mm,
mu = 218,
alternative = "less"
)
t.test(flipper_length_mm ~ species, data = subset(penguins, species != "Chinstrap"))
par(mfrow = c(1, 2))
hist(penguins$body_mass_g, breaks = 80, main = "histogram of body mass", xlab = "body mass (g)")
plot(density(penguins$body_mass_g, na.rm = TRUE), main = "density plot of body mass")
dev.off()
boxplot(body_mass_g ~ species, data = penguins)
dat_chinstrap = subset(penguins, species == "Chinstrap")
mean(dat_chinstrap$body_mass_g, na.rm = TRUE)
shapiro.test(dat_chinstrap$body_mass_g)
aggregate(body_mass_g ~ species, data = penguins, FUN = mean)
aggregate(
body_mass_g ~ species,
data = penguins,
FUN = function(x) shapiro.test(x)$p.value)
fit_species = lm(body_mass_g ~ species, data = penguins)
summary(fit_species)
anova(fit_species)
fit_species = lm(body_mass_g ~ species, data = penguins)
summary(fit_species)
anova(fit_species)
fit_additive = lm(body_mass_g ~ sex * species, data = penguins)
summary(fit_additive)
lm(bill_length_mm ~ body_mass_g, data = penguins)
boxplot(body_mass_g ~ sex * species, data = penguins)
require(palmerpenguins)
boxplot(body_mass_g ~ species * sex, data = penguins,
ylab = "Body Mass (g)", xlab = "", las = 2,
names = c("Adelie \n Female", "Adelie \n Male",
"Gentoo \n Female", "Gentoo \n Male",
"Chinstrap \n Female", "Chinstrap \n Male"),
main = "Penguin Body Mass by Species and Sex")
require(palmerpenguins)
boxplot(body_mass_g ~ species * sex, data = penguins,
ylab = "Body Mass (g)", xlab = "", las = 2,
names = c("Adelie \n Female", "Adelie \n Male",
"Gentoo \n Female", "Gentoo \n Male",
"Chinstrap \n Female", "Chinstrap \n Male"),
main = "Penguin Body Mass by Species and Sex")
require(palmerpenguins)
boxplot(body_mass_g ~ species * sex, data = penguins,
ylab = "Body Mass (g)", xlab = "", las = 2,
main = "Penguin Body Mass by Species and Sex")
fit_additive = lm(body_mass_g ~ sex * species, data = penguins)
summary(fit_additive)
?boxplot()
require(palmerpenguins)
boxplot(body_mass_g ~ species * sex, data = penguins,
ylab = "Body Mass (g)", xlab = "", las = 2,
names = "Adelie \n Female", "Chinstrap \n Female",
"Gentoo \n Female", "Adelie \n Male",
"Chinstrap \n Male", "Gentoo \n Male",
main = "Penguin Body Mass by Species and Sex")
require(palmerpenguins)
boxplot(body_mass_g ~ species * sex, data = penguins,
ylab = "Body Mass (g)", xlab = "", las = 2,
names = ("Adelie \n Female", "Chinstrap \n Female",
require(palmerpenguins)
boxplot(body_mass_g ~ species * sex, data = penguins,
ylab = "Body Mass (g)", xlab = "", las = 2,
names = ("Adelie \n Female" "Chinstrap \n Female",
require(palmerpenguins)
boxplot(body_mass_g ~ species * sex, data = penguins,
ylab = "Body Mass (g)", xlab = "", las = 2,
names = "Adelie \n Female", "Chinstrap \n Female",
"Gentoo \n Female", "Adelie \n Male",
"Chinstrap \n Male", "Gentoo \n Male",
main = "Penguin Body Mass by Species and Sex")
require(palmerpenguins)
boxplot(body_mass_g ~ species * sex, data = penguins,
ylab = "Body Mass (g)", xlab = "", las = 2,
names = c("Adelie \n Female", "Chinstrap \n Female",
"Gentoo \n Female", "Adelie \n Male",
"Chinstrap \n Male", "Gentoo \n Male"),
main = "Penguin Body Mass by Species and Sex")
fit_both <- lm(body_mass_g ~ sex * species, data = penguins)
summary(fit_both)
aggregate(body_mass_g ~ species, data = penguins, FUN = mean)
aggregate(body_mass_g ~ sex * species, data = penguins, FUN = mean)
aggregate(body_mass_g ~ sex * species, data = penguins, FUN = mean)
require(palmerpenguins)
boxplot(body_mass_g ~ sex * species, data = penguins,
ylab = "Body Mass (g)", xlab = "", las = 2,
main = "Penguin Body Mass by Species and Sex")
boxplot(body_mass_g ~ sex * species, data = penguins)
require(palmerpenguins)
boxplot(body_mass_g ~ sex * species, data = penguins,
ylab = "Body Mass (g)", xlab = "", las = 2,
names = c("Adelie \n Female", "Adelie \n Male",
"Chinstrap \n Female", "Chinstrap \n Male",
"Gentoo \n Female", "Gentoo \n Male"),
main = "Penguin Body Mass by Species and Sex")
require(palmerpenguins)
boxplot(body_mass_g ~ sex * species, data = penguins,
ylab = "Body Mass (g)", xlab = "", las = 2,
names = c("Adelie \n Female", "Adelie \n Male",
"Chinstrap \n Female", "Chinstrap \n Male",
"Gentoo \n Female", "Gentoo \n Male"),
main = "Penguin Body Mass by Species and Sex")
summary(fit_both)
library(here)
bird <- read.csv(here("data", "bird.sub.csv"))
hab <- read.csv(here("data", "hab.sub.csv"))
birdhab <- merge(bird, hab)
dim(birdhab)
fit_1 <- lm(BRCR ~ ls, data = birdhab)
fit_1_coefs = coefficients(fit_1)
fit_1_summary = summary(fit_1)
sd_obs <- fit_1_summary$sigma
int_obs <- fit_1_coefs[1]
slope_obs <- fit_1_coefs[2]
int_obs
sd_obs
slope_obs
alpha = 0.05
n_sims = 100
p_vals = numeric(n_sims)
n_sds = 20
pop_sds = seq(from = 0.01, to = 1.5, length.out = n_sds)
pop_sd_powers = numeric(length(n_sds))
for(j in 1:length(pop_sds))
{
pop_sd_j = pop_sds[j]
for(i in 1:n_sims)
{
fit_sim = linear_sim_fit( x = birdhab$ls,
y_int = int_obs,
slope = slope_obs,
st_dev = pop_sds[j])
p_vals[i] = summary(fit_sim)$coefficients[2, 'Pr(>|t|)']
}
pop_sd_powers[j] = sum(p_vals < alpha) / n_sims
}
linear_simulator = function(x, y_int, slope, st_dev)
{
noise = rnorm(length(x), mean = 0, sd = st_dev)
return(slope * x + y_int + noise)
}
linear_sim_fit = function(x, slope, y_int, st_dev)
{
y_sim = linear_simulator(
x = x,
y_int = y_int,
slope = slope,
st_dev = st_dev
)
fit_sim = lm(y_sim ~ x)
return(fit_sim)
}
alpha = 0.05
n_sims = 100
p_vals = numeric(n_sims)
n_sds = 20
pop_sds = seq(from = 0.01, to = 1.5, length.out = n_sds)
pop_sd_powers = numeric(length(n_sds))
for(j in 1:length(pop_sds))
{
pop_sd_j = pop_sds[j]
for(i in 1:n_sims)
{
fit_sim = linear_sim_fit( x = birdhab$ls,
y_int = int_obs,
slope = slope_obs,
st_dev = pop_sds[j])
p_vals[i] = summary(fit_sim)$coefficients[2, 'Pr(>|t|)']
}
pop_sd_powers[j] = sum(p_vals < alpha) / n_sims
}
sim_output_dispersion = data.frame(
sd = pop_sds,
power = pop_sd_powers)
plot(power ~ sd, data = sim_output_dispersion)
abline(v = sd_obs, col = "red", lty = 2)
alpha = 0.05
n_sims = 100
p_vals = numeric(n_sims)
n_sds = 20
pop_sds = seq(from = 0.01, to = 1.5, length.out = n_sds)
pop_sd_powers = numeric(length(n_sds))
for(j in 1:length(pop_sds))
{
pop_sd_j = pop_sds[j]
for(i in 1:n_sims)
{
fit_sim = linear_sim_fit( x = birdhab$ls,
y_int = int_obs,
slope = slope_obs,
st_dev = pop_sds[j])
p_vals[i] = summary(fit_sim)$coefficients[2, 'Pr(>|t|)']
}
pop_sd_powers[j] = sum(p_vals < alpha) / n_sims
}
sim_output_dispersion = data.frame(
sd = pop_sds,
power = pop_sd_powers)
plot(power ~ sd, data = sim_output_dispersion, xlab = "Population Standard Deviation", ylab = "Statistical Power", main = "Population Disperson and Statistical Power")
abline(v = sd_obs, col = "red", lty = 2)
max_x = max(birdhab$ls)
sample_sizes = seq(5, 100)
sim_output_3 = matrix(nrow = length(pop_sds), ncol = length(sample_sizes))
for(k in 1:length(pop_sds))
{
pop_sd_k = pop_sds[k]
for(j in 1:length(sample_sizes))
{
x_vals = seq(0, max_x, length.out = sample_sizes[j])
for(i in 1:n_sims)
{
fit_sim = linear_sim_fit( x = x_vals,
y_int = int_obs,
slope = slope_obs,
st_dev = pop_sd_k)
p_vals[i] = summary(fit_sim)$coefficients[2, 'Pr(>|t|)']
}
sim_output_3[k, j] = sum(p_vals < alpha) / n_sims
}
print(paste0("Testing standard deviation ", k, " of ", n_sds))
}
image(sim_output_3)
sim_3_dat =
list(
power = sim_output_3,
sample_size = sample_sizes,
pop_sd = pop_sds)
image(sim_output_3)
sim_3_dat =
list(
power = sim_output_3,
sample_size = sample_sizes,
pop_sd = pop_sds)
contour(
x = sim_3_dat$pop_sd,
y = sim_3_dat$sample_size,
z = sim_3_dat$power,
xlab = "Population Dispersion",
ylab = "Sample Size",
main = "Contour Plot of Statistical Power",
levels = seq(0, 1, length.out = 9),
drawlabels = TRUE,
# method = "simple")
method = "edge")
install.packages("rgl")
install.packages("rgl")
library(rgl)
persp3d(x = sim_3_dat$pop_sd,
y = sim_3_dat$sample_size,
z = sim_3_dat$power,
xlab = "sd", ylab = "n", zlab = "power",
col = 'plum1',
theta = 30, phi = 30, expand = .75,
ticktype = 'detailed')
require(htmlwidgets)
saveWidget(
rglwidget(),
file = here(
"docs", "webGL",
"n_popdispersion_power_sim_plot.html"),
selfcontained = TRUE)
abline(v = sd_obs, col = "red", lty = 2, lwd = 3)
plot(power ~ sd, data = sim_output_dispersion, xlab = "Population Standard Deviation", ylab = "Statistical Power", main = "Population Disperson and Statistical Power")
abline(v = sd_obs, col = "red", lty = 2, lwd = 3)
sim_output_dispersion = data.frame(
sd = pop_sds,
power = pop_sd_powers)
plot(power ~ sd, data = sim_output_dispersion, xlab = "Population Standard Deviation", ylab = "Statistical Power", main = "Population Disperson and Statistical Power")
abline(v = sd_obs, col = "red", lty = 2, lwd = 3)
abline(v = sd_obs, col = "red", lty = 2)
alpha = 0.05
n_sims = 100
p_vals = numeric(n_sims)
n_sds = 20
pop_sds = seq(from = 0.01, to = 1.5, length.out = n_sds)
pop_sd_powers = numeric(length(n_sds))
for(j in 1:length(pop_sds))
{
pop_sd_j = pop_sds[j]
for(i in 1:n_sims)
{
fit_sim = linear_sim_fit( x = birdhab$ls,
y_int = int_obs,
slope = slope_obs,
st_dev = pop_sds[j])
p_vals[i] = summary(fit_sim)$coefficients[2, 'Pr(>|t|)']
}
pop_sd_powers[j] = sum(p_vals < alpha) / n_sims
}
sim_output_dispersion = data.frame(
sd = pop_sds,
power = pop_sd_powers)
plot(power ~ sd, data = sim_output_dispersion, xlab = "Population Standard Deviation", ylab = "Statistical Power", main = "Population Disperson and Statistical Power")
abline(v = sd_obs, col = "red", lty = 2)
plot(power ~ sd, data = sim_output_dispersion, xlab = "Population Standard Deviation", ylab = "Statistical Power", main = "Population Disperson and Statistical Power")
abline(v = sd_obs, col = "red", lty = 2, lwd = 3)
alpha = 0.05
n_sims = 100
p_vals = numeric(n_sims)
n_sds = 20
pop_sds = seq(from = 0.01, to = 1.5, length.out = n_sds)
pop_sd_powers = numeric(length(n_sds))
for(j in 1:length(pop_sds))
{
pop_sd_j = pop_sds[j]
for(i in 1:n_sims)
{
fit_sim = linear_sim_fit( x = birdhab$ls,
y_int = int_obs,
slope = slope_obs,
st_dev = pop_sds[j])
p_vals[i] = summary(fit_sim)$coefficients[2, 'Pr(>|t|)']
}
pop_sd_powers[j] = sum(p_vals < alpha) / n_sims
}
sim_output_dispersion = data.frame(
sd = pop_sds,
power = pop_sd_powers)
plot(power ~ sd, data = sim_output_dispersion, xlab = "Population Standard Deviation", ylab = "Statistical Power", main = "Population Disperson and Statistical Power")
abline(v = sd_obs, col = "red", lty = 2, lwd = 3)
