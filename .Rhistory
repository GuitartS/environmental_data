type = "response"
)
par(mfrow = c(2, 1))
plot(
GCKI_pres ~ slope, data = dat_all, axes = FALSE, ylim = c(-0.2,1.2),
xlab = "Percent Slope", ylab = "", main = "GCKI Presence/Absence by % Slope",
pch = 16, col = adjustcolor("red", alpha.f = 0.1))
axis(1, at = seq(0,110, by = 10))
axis(2, at = c(0,1), labels = c("Absent", "Present"), las = 2)
box()
lines(gcki_predicted ~ slope, data = slope_newdata)
plot(
GCKI_pres ~ ba.tot, data = dat_all, axes = FALSE, ylim = c(-0.2, 1.2),
xlab = "Basal Area", ylab = "", main = "GCKI Presence/Absence by Basal Area",
pch = 16, col = adjustcolor("blue", alpha.f = 0.1))
axis(1, at = seq(0,210, by = 50))
axis(2, at = c(0,1), labels = c("Absent", "Present"), las = 2)
box()
lines(gcki_predicted ~ ba.tot, data = ba_newdata)
n = 50
ba.tot = seq(
from = min(dat_all$ba.tot, na.rm = T),
to = max(dat_all$ba.tot, na.rm = T),
length.out = n)
slope = seq(
from = min(dat_all$slope, na.rm = T),
to = max(dat_all$slope, na.rm = T),
length.out = n)
new_dat_all = expand.grid(
ba.tot = ba.tot,
slope = slope)
new_dat_all$pred_add = predict(
fit_gcki_both_additive,
newdata = new_dat_all,
type = "response")
new_dat_all$pred_int = predict(
fit_gcki_both_interactive,
newdata = new_dat_all,
type = "response")
z_gcki_add = matrix(
new_dat_all$pred_add,
nrow = length(ba.tot),
byrow = FALSE)
z_gcki_int = matrix(
new_dat_all$pred_int,
nrow = length(ba.tot),
byrow = FALSE)
par(mfrow = c(1, 2))
contour(
x = ba.tot, y = slope,
z = z_gcki_add,
xlab = "Total Basal Area",
ylab = "Percent Slope",
main = "Additive")
contour(
x = ba.tot,
y = slope,
z = z_gcki_int,
xlab = "Total Basal Area",
ylab = "Percent Slope",
main = "Interactive")
require(rgl)
rgl::persp3d(
x = ba.tot,
y = slope,
z = z_gcki_add,
col = "darkorchid4",
xlab = "Basal Area",
ylab = "Slope",
zlab = "Pr(present)",
alpha = 0.4)
rglwidget()
rgl::persp3d(
x = ba.tot,
y = slope,
z = z_gcki_int,
col = "firebrick4",
xlab = "Basal Area",
ylab = "Slope",
zlab = "Pr(present)",
alpha = 0.4)
rglwidget()
knitr::opts_chunk$set(echo = TRUE)
## loading the palmerpenguin packages incorrectly at first
library(Palmerpenguins)
require(Palmerpenguins)
## loading the palmerpenguin packages incorrectly at first
library(Palmerpenguins)
## loading the palmerpenguin packages incorrectly at first
require(Palmerpenguins)
library(Palmerpenguins)
## loading the palmerpenguin packages incorrectly at first with require, then correctly with library
require(Palmerpenguins)
library(palmerpenguins)
## loading the package here with require
require(here)
## loading the 2021 gingko datafile using here()
ginkgo <- read.csv(here("data", "ginkgo_data_2022.csv"))
str(ginkgo)
head(ginkgo)
## create a vector of numbers
num_vec = c(1, 2, 3, 4, 5, 6)
num_vec
char_vec
char_vec = c("R", "is", "pretty", "fun", "sometimes")
char_vec
char_vec = c("R", "is", "pretty", "fun", "sometimes")
char_vec
print(char_vec)
## what is the length of num_vec?
length(num_vec)
## what does it do with characters?
length(char_vec)
## what does it do with characters?
char2 = c("R is", "pretty fun", "sometimes")
length(char2)
length(char_vec)
## what are the dimensions of my dataframe?
dim(ginkgo)
## how many columns does my dataframe have?
nrows(ginkgo)
## how many columns does my dataframe have?
ncol(ginkgo)
## how many rows does my dataframe have?
nrow(ginkgo)
?matrix()
m1 = matrix(num_vec, nrow = 3, ncol = 2, byrow = TRUE, dimname = "Null")
m1 = matrix(num_vec, nrow = 3, ncol = 2, byrow = TRUE, dimname = NULL)
m1 = matrix(num_vec, nrow = 3, ncol = 2, byrow = TRUE, dimname = NULL)
m1
m2 = matrix(num_vec, nrow = 2, ncol = 3, byrow = TRUE, dimname = NULL)
m2
m3 = matrix(num_vec, nrow = 2, ncol = 3, byrow = FALSE, dimname = NULL)
m3
m4 = matrix(num_vec, nrows = 2, ncol = 4, byrow = FALSE, dimmname = NULL)
m4 = matrix(num_vec, nrows = 2, ncol = 4, byrow = FALSE, dimname = NULL)
m4 = matrix(num_vec, nrow = 2, ncol = 4, byrow = FALSE, dimname = NULL)
m4
m4 = matrix(num_vec, nrow = 2, ncol = 4, byrow = FALSE, dimname = NULL)
m4
m4 = matrix(char_vec, nrow = 2, ncol = 4, byrow = FALSE, dimname = NULL)
m4
m4 = matrix(num_vec, nrow = 2, ncol = 4, byrow = FALSE, dimname = NULL)
m4
## let's try it out!
m5 = matrix(char_vec, nrow = 2, ncol = 5, byrow = FALSE, dimname = NULL)
m5
## let's try it out!
m5 = matrix(char_vec, nrow = 2, ncol = 5, byrow = TRUE, dimname = NULL)
m5
char_vec = c("R", "can", "be", "pretty", "fun", "sometimes")
char_vec
print(char_vec)
## what does it do with characters?
char2 = c("R is", "pretty fun", "sometimes")
length(char2)
length(char_vec)
## what does it do with characters?
char2 = c("R can be", "pretty fun", "sometimes")
length(char2)
length(char_vec)
## why not!
m5 = matrix(char_vec, nrow = 2, ncol = 6, byrow = TRUE, dimname = NULL)
m5
?data.frame()
d = data.frame("numbers" = num_vec, "characters" = char_vec)
d
d2 = data.frame("numbers" = c(1:6), "characters" = c("one", "two", "three", "four", "five", "six"))
d2
## how many rows does my dataframe have?
nrow(ginkgo)
## how many columns does my dataframe have?
ncol(ginkgo)
## what are the dimensions of my dataframe?
dim(ginkgo)
## calling the column
ginkgo$seeds_present
## calling the column
ginkgo$max_width
## importing that column into a new object
max_width = ginkgo$max_width
head(max_width)
## I want the first row
ginkgo[1,]
ginkgo[1]
## I want the first row, so I specify the row number I'm interested in, and then LEAVE THE COLUMN ENTRY BLANK. It will not
ginkgo[1,]
ginkgo[1]
## I want the first row, so I specify the row number I'm interested in, and then LEAVE THE COLUMN ENTRY BLANK. It will assume you're looking for the first column and return that instead.
## incorrect first
## correct second
ginkgo[1]
ginkgo[1,]
## calling one element only
ginkgo[2,3]
## selecting the third column only
ginkgo[,3]
## selecting the third column only. You can can either leave the
ginkgo[,3]
ginkgo[3]
## selecting the third column only, leaving the row entry empty
ginkgo[,3]
subset(penguins, species == "Adelie")
subset(penguins, species == "Adelie")
adelie = subset(penguins, species == "Adelie")
adelie
## let's try something small
summary(num_vec)
## let's try something small
summary(num_vec)
summary(char_vec)
## let's try something a little harder
## let's get a summary of the maximum width of our ginkgo leaves
summary(ginkgo$max_width)
##
mean(num_vec)
?mean()
##
mean(num_vec)
sum(is.na(ginkgo))
bad = c(0:20, NA, 6, 7)
bad
bad = c(1, 2, 3, 4, 5, 6, NA)
bad
bad = c(1, 2, 3, 4, 5, 6, NA)
bad
mean(bad)
## let's remove the NAs
mean(bad, na.rm = TRUE)
?summary()
summary(ginkgo)
mean(ginkgo)
mean(ginkgo, na.rm = TRUE)
mean(ginkgo, na.rm = TRUE)
## individual columns
mean(ginkgo$max_width)
## individual columns
mean(ginkgo$max_width, na.rm = TRUE)
## individual columns
mean(ginkgo$max_width, na.rm = TRUE)
mean(ginkgo[3], na.rm= TRUE)
View(ginkgo)
## individual columns
mean(ginkgo$max_width, na.rm = TRUE)
mean(ginkgo[,3], na.rm= TRUE)
?sd()
sd(bad)
sd(bad)
sd(bad, na.rm = TRUE)
mean(ginkgo$max_width, na.rm = TRUE)
mean(ginkgo[,3], na.rm= TRUE)
sd(ginkgo$max_width, na.rm = TRUE)
sd(ginkgo[,3], na.rm= TRUE)
## basic scatterplot, with max leaf depth on the x axis, and max leaf width on the y axis.
## x axis goes first, then y
plot(ginkgo$max_depth, ginkgo$max_width)
plot(ginkgo$max_depth, ginkgo$max_width, main = "Sarah's Ginkgo Plot",
xlab = "Ginkgo Leaf Depth", ylab = "Ginkgo Leaf Width", xlim = c(20:140),
ylim = c(20, 160), col = "purple", pch = 18, cex = 1)
plot(ginkgo$max_depth, ginkgo$max_width, main = "Sarah's Ginkgo Plot",
xlab = "Ginkgo Leaf Depth", ylab = "Ginkgo Leaf Width", xlim = c(20, 140),
ylim = c(20, 160), col = "purple", pch = 18, cex = 1)
plot(ginkgo$max_depth, ginkgo$max_width, main = "Sarah's Ginkgo Plot",
xlab = "Ginkgo Leaf Depth", ylab = "Ginkgo Leaf Width", xlim = c(20, 130),
ylim = c(20, 150), col = "purple", pch = 18, cex = 1)
hist(penguins$flipper_length_mm)
hist(penguins$flipper_length_mm, main = "Sarah's Histogram", xlab = "Penguin Flipper Lengths (mm)")
hist(penguins$flipper_length_mm, breaks = 5, main = "Sarah's Histogram", xlab = "Penguin Flipper Lengths (mm)")
hist(penguins$flipper_length_mm, breaks = seq(min(penguins), max(penguins), length.out = 6), main = "Sarah's Histogram", xlab = "Penguin Flipper Lengths (mm)")
?hist()
## breakpoints at 20 mm intervals
hist(penguins$flipper_length_mm, breaks = c(170,190,210,230,250), main = "Sarah's Histogram", xlab = "Penguin Flipper Lengths (mm)")
## more breakpoints!
hist(penguins$flipper_length_mm, breaks = 30, main = "Sarah's Histogram", xlab = "Penguin Flipper Lengths (mm)")
box(ginkgo$petiole_length)
boxplot(ginkgo$petiole_length)
boxplot(ginkgo$petiole_length, main = "Sarah's Boxplot", xlab = "Petiole Length",
ylab = "Length (mm)")
boxplot(max_width ~ seeds_present, data = ginkgo, main = "Sarah's Conditional Boxplot",
xlab = "Maximum Width Depending on if Seeds are Present", ylab = "Length (mm)")
boxplot(max_width ~ seeds_present, data = ginkgo, main = "Sarah's Conditional Boxplot",
xlab = "Maximum Width Depending on if Seeds are Present", ylab = "Width (mm)")
boxplot(max_width ~ seeds_present, data = ginkgo, main = "Sarah's Conditional Boxplot",
xlab = "Leaf Width and Seed Presence", ylab = "Width (mm)")
par(mfrow = c(2,2))
hist(penguins$bill_length_mm)
hist(penguins$bill_depth_mm)
hist(penguins$flipper_length_mm)
hist(penguins$body_mass_g)
dev.off()
par(mfrow = c(2,2))
hist(penguins$bill_length_mm, main = "Penguin Bill Lengths", xlab = "Bill Lengths (mm)")
hist(penguins$bill_depth_mm, main = "Penguin Bill Depths", xlab = "Bill Depth (mm)")
hist(penguins$flipper_length_mm, main = "Penguin Flipper Lengths",
xlab = "Flipper Lengths (mm)")
hist(penguins$body_mass_g, main = "Penguin Body Masses", xlab = "Body Mass (g)")
dev.off()
?dnorm()
knitr::opts_chunk$set(echo = TRUE)
## let's try x = 1
dnorm(x = 1, mean = 0, sd =1)
## let's try x = 1
dnorm(x = 1, mean = 0, sd =1)
dnorm(x = 1)
## let's try x = 1
dnorm(x = 1, mean = 0, sd =1)
dnorm(x = 1)
dnorm(1)
## let's try x = 1, showing the arguments and the default values
dnorm(x = 1, mean = 0, sd =1)
dnorm(x = 1)
dnorm(1)
# let's try x = 1, showing the arguments and the default values
qnorm(q = 1, mean = 0, sd = 1)
# let's try x = 1, showing the arguments and the default values
pnorm(q = 1, mean = 0, sd = 1)
# let's try x = 1, showing the arguments and the default values
pnorm(q = 1, mean = 0, sd = 1)
pnorm(q = 1)
# let's try x = 1, showing the arguments and the default values
pnorm(q = 1, mean = 0, sd = 1)
pnorm(q = 1)
pnorm(1)
# let's try x = 1, showing the arguments and the default values
qnorm(p = 1, mean = 0, sd = 1)
qnorm(p = 1)
qnorm(1)
# let's try x = 1, showing the arguments and the default values
pnorm(q = 1, mean = 0, sd = 1)
pnorm(q = 1)
pnorm(1)
pnorm(0)
# let's try x = 1, showing the arguments and the default values
qnorm(p = 0.5, mean = 0, sd = 1)
qnorm(p = 0.5)
qnorm(0.5)
# let's try x = 1, showing the arguments and the default values
qnorm(p = 0.5, mean = 0, sd = 1)
qnorm(p = 0.5)
qnorm(0.5)
## let's try x = 1, showing the arguments and the default values
dnorm(x = 1, mean = 0, sd =1)
dnorm(x = 1)
dnorm(1)
?dbinom
## let's find the probability of x = 1, when we have 1 trial, and a probability success of 0.5
dbinom(x = 1, size = 1, prob = 0.5)
## let's find the probability of x = 1, when we have 1 trial, and a probability success of 0.5
dbinom(x = 1, size = 1, prob = 0.5)
dbinom(1, 1, 0.5)
## let's try the cumulative density of variable 5, with 10 trials and a probability success of 0.5
pbinom(x = 5, size = 10, prob = 0.5)
## let's try the cumulative density of variable 5, with 10 trials and a probability success of 0.5
pbinom(q = 5, size = 10, prob = 0.5)
## let's try the cumulative density of variable 5, with 10 trials and a probability success of 0.5
pbinom(q = 1, size = 1, prob = 0.5)
## let's try the cumulative density of variable 5, with 10 trials and a probability success of 0.5
pbinom(q = 1, size = 2, prob = 0.5)
## let's try the cumulative density of variable 5, with 10 trials and a probability success of 0.5
pbinom(q = 0, size = 2, prob = 0.5)
## let's try the cumulative density of variable 5, with 10 trials and a probability success of 0.5
pbinom(q = 0, size = 2, prob = 0.25)
## let's try the cumulative density of variable 5, with 10 trials and a probability success of 0.5
pbinom(q = 1, size = 2, prob = 0.5)
qbinom(p = 0.75, size = 2, prob = 0.5)
library(here)
delomys = read.csv(here("data", "delomys.csv"))
head(delomys)
str(delomys)
head(delomys)
dim(delomys)
str(delomys)
library(here)
delomys = read.csv(here("data", "delomys.csv"))
head(delomys)
dim(delomys)
str(delomys)
summary(delomys$body_mass)
summary(delomys$body_mass)
summary(delomys$body_length)
shapiro.test(delomys$body_mass)
shapiro.test(delomys$body_length)
plot(delomys$body_mass, delomys$body_length, xlab = "Body Mass", ylab = "Body Length")
hist(delomys$body_mass, xlab = "Body Mass")
hist(delomys$body_mass, xlab = "Body Mass", main = "Body Mass Histogram")
hist(delomys$body_length, xlab = "Body Length", main = "Body Length Histogram")
View(delomys)
boxplot(body_mass ~ binomial, data = delomys, xlab = "Species", ylab = "")
boxplot(body_mass ~ sex, data = delomys, xlab = "Species", ylab = "")
boxplot(body_mass ~ sex, data = delomys, xlab = "Sex", ylab = "")
boxplot(body_mass ~ sex * binomial, data = delomys, xlab = "Sex and Species",
ylab = "")
boxplot(body_mass ~ sex * binomial, data = delomys, xlab = "Sex and Species",
ylab = "")
plot(delomys$body_mass, delomys$body_length, xlab = "Body Mass", ylab = "Body Length")
plot(delomys$body_mass, delomys$body_length, xlab = "Body Mass", ylab = "Body Length")
hist(delomys$body_length, xlab = "Body Length", main = "Body Length Histogram")
hist(delomys$body_length, xlab = "Body Length", main = "Body Length Histogram")
hist(delomys$body_length, xlab = "Body Length", main = "Body Length Histogram")
hist(delomys$body_length, xlab = "Body Length", main = "Body Length Histogram")
hist(delomys$body_length, xlab = "Body Length", main = "Body Length Histogram")
boxplot(body_mass ~ sex * binomial, data = delomys, xlab = "Sex and Species",
ylab = "", las = 2)
boxplot(body_mass ~ sex * binomial, data = delomys, xlab = "",
ylab = "", las = 2)
boxplot(body_mass ~ sex * binomial, data = delomys, xlab = "",
ylab = "", las = 2)
boxplot(body_mass ~ sex * binomial, data = delomys, xlab = "",
ylab = "", las = 2)
boxplot(body_mass ~ sex * binomial, data = delomys, xlab = "",
ylab = "", las = 2)
boxplot(body_mass ~ sex * binomial, data = delomys, xlab = "",
ylab = "", las = 2)
boxplot(body_mass ~ sex * binomial, data = delomys, xlab = "",
ylab = "", las = 2)
boxplot(body_mass ~ sex, data = delomys, xlab = "Sex", ylab = "")
boxplot(body_mass ~ sex, data = delomys, xlab = "Sex", ylab = "")
boxplot(body_mass ~ sex, data = delomys, xlab = "Sex", ylab = "")
plot(delomys$body_mass, delomys$body_length, xlab = "Body Mass", ylab = "Body Length")
plot(delomys$body_mass, delomys$body_length, xlab = "Body Mass", ylab = "Body Length")
hist(delomys$body_mass, xlab = "Body Mass", main = "Body Mass Histogram")
hist(delomys$body_length, xlab = "Body Length", main = "Body Length Histogram")
boxplot(body_mass ~ binomial, data = delomys, xlab = "Species", ylab = "")
plot(delomys$body_mass, delomys$body_length, xlab = "Body Mass", ylab = "Body Length")
boxplot(body_mass ~ sex * binomial, data = delomys, xlab = "",
ylab = "Body Mass (g)", las = 2)
boxplot(body_mass ~ sex, data = delomys, xlab = "Sex", ylab = "Body Mass (g)")
plot(delomys$body_mass, delomys$body_length, main = "Body Mass vs Body Length"
xlab = "Body Mass (g)", ylab = "Body Length (mm)")
plot(delomys$body_mass, delomys$body_length, main = "Body Mass vs Body Length",
xlab = "Body Mass (g)", ylab = "Body Length (mm)")
plot(delomys$body_mass, delomys$body_length, main = "Body Mass vs Body Length",
xlab = "Body Mass (g)", ylab = "Body Length (mm)")
hist(delomys$body_mass, xlab = "Body Mass (g)", main = "Body Mass Histogram")
hist(delomys$body_length, xlab = "Body Length (mm)", main = "Body Length Histogram")
boxplot(body_mass ~ binomial, data = delomys, xlab = "Species", ylab = "Body Mass (g)")
boxplot(body_mass ~ binomial, data = delomys, main = "Body Mass Boxplot"
xlab = "Species", ylab = "Body Mass (g)")
boxplot(body_mass ~ binomial, data = delomys, main = "Body Mass Boxplot",
xlab = "Species", ylab = "Body Mass (g)")
boxplot(body_mass ~ sex, data = delomys, main = "Body Mass by Sex",
xlab = "Sex", ylab = "Body Mass (g)")
boxplot(body_mass ~ binomial * sex, data = delomys,
main = "Body Mass by Species and Sex",
xlab = "",
ylab = "Body Mass (g)", las = 2)
boxplot(body_mass ~ binomial * sex, data = delomys,
main = "Body Mass by Species and Sex",
xlab = "",
ylab = "Body Mass (g)", las = 2)
boxplot(body_mass ~ binomial * sex, data = delomys,
main = "Body Mass by Species and Sex",
xlab = "", names = c("Delomys \n dorsalis \n female",
"Delomys \n sublineatus \n female",
"Delomys \n dorsalis \n male",
"Delomys \n sublineatus \n male")
ylab = "Body Mass (g)", las = 2)
boxplot(body_mass ~ binomial * sex, data = delomys,
main = "Body Mass by Species and Sex",
xlab = "", names = c("Delomys \n dorsalis \n female",
"Delomys \n sublineatus \n female",
"Delomys \n dorsalis \n male",
"Delomys \n sublineatus \n male"),
ylab = "Body Mass (g)", las = 2)
boxplot(body_mass ~ binomial * sex, data = delomys,
main = "Body Mass by Species and Sex",
xlab = "", names = c("Delomys \n dorsalis \n female",
"Delomys \n sublineatus \n female",
"Delomys \n dorsalis \n male",
"Delomys \n sublineatus \n male"),
ylab = "Body Mass (g)", las = 2)
fit1 = lm(body_mass ~ body_mass, data = delomys)
fit1 = lm(body_length ~ body_mass, data = delomys)
fit2 = lm(body_mass ~ sex, data = delomys)
fit1 = lm(body_length ~ body_mass, data = delomys)
fit2 = lm(body_mass ~ sex, data = delomys)
fit3 = lm(body_mass ~ binomial, data = delomys)
fit4 = lm(body_mass ~ sex + binomial, data = delomys)
fit5 = lm(body_mass ~ sex * binomial, data = delomys)
anova(fit2)
anova(fit2)
anova(fit3)
anova(fit4)
anova(fit5)
residuals(fit1)
hist1 = hist(residuals(fit1))
hist1 = hist(residuals(fit1))
hist2 = hist(residuals(fit2))
hist1 = hist(residuals(fit1))
hist2 = hist(residuals(fit2))
hist3 = hist(residuals(fit3))
hist4 = hist(residuals(fit4))
hist5 = hist(residuals(fit5))
shapiro.test(residuals(fit1))
shapiro.test(residuals(fit1))
shapiro.test(residuals(fit2))
shapiro.test(residuals(fit3))
shapiro.test(residuals(fit4))
shapiro.test(residuals(fit5))
knitr::kable(coef(summary(fit1)))
knitr::kable(coef(summary(fit1)))
knitr::kable(anova(fit2))
knitr::kable(coef(summary(fit1)))
knitr::kable(anova(fit2))
knitr::kable(anova(fit3))
knitr::kable(anova(fit4))
knitr::kable(anova(fit5))
AIC(fit2)
AIC(fit2)
AIC(fit3)
AIC(fit4)
AIC(fit5)
